Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON programA
Rule 2     programA -> vars programB
Rule 3     programA -> programB
Rule 4     programB -> bloque empty
Rule 5     vars -> VAR varsA
Rule 6     varsA -> ID COMMA varsA
Rule 7     varsA -> ID COLON tipo SEMICOLON varsB
Rule 8     varsB -> varsA
Rule 9     varsB -> empty
Rule 10    tipo -> INT empty
Rule 11    tipo -> FLOAT empty
Rule 12    bloque -> LEFT_CURVBR bloqueA
Rule 13    bloqueA -> estatuto bloqueA
Rule 14    bloqueA -> RIGHT_CURVBR empty
Rule 15    estatuto -> asignacion empty
Rule 16    estatuto -> condicion empty
Rule 17    estatuto -> escritura empty
Rule 18    asignacion -> ID EQUAL expresion SEMICOLON empty
Rule 19    escritura -> PRINT LEFT_PAR escrituraA
Rule 20    escrituraA -> expresion escrituraB
Rule 21    escrituraA -> STRING escrituraB
Rule 22    escrituraB -> COMMA escrituraA
Rule 23    escrituraB -> RIGHT_PAR SEMICOLON empty
Rule 24    expresion -> exp expresionA
Rule 25    expresionA -> LESS exp empty
Rule 26    expresionA -> GREATER exp empty
Rule 27    expresionA -> DIFFERENT exp empty
Rule 28    expresionA -> empty
Rule 29    condicion -> IF LEFT_PAR expresion RIGHT_PAR bloque condicionA
Rule 30    condicionA -> ELSE bloque empty
Rule 31    condicionA -> empty
Rule 32    exp -> termino expA
Rule 33    expA -> PLUS exp
Rule 34    expA -> MINUS exp
Rule 35    expA -> empty
Rule 36    termino -> factor terminoA
Rule 37    terminoA -> MULTIPLY termino
Rule 38    terminoA -> DIVIDE termino
Rule 39    terminoA -> empty
Rule 40    factor -> LEFT_PAR expresion RIGHT_PAR empty
Rule 41    factor -> factorA
Rule 42    factorA -> PLUS factorB
Rule 43    factorA -> MINUS factorB
Rule 44    factorA -> factorB
Rule 45    factorB -> varcte empty
Rule 46    varcte -> ID empty
Rule 47    varcte -> INT empty
Rule 48    varcte -> FLOAT empty
Rule 49    empty -> <empty>

Terminals, with rules where they appear

COLON                : 7
COMMA                : 6 22
DIFFERENT            : 27
DIVIDE               : 38
ELSE                 : 30
EQUAL                : 18
FLOAT                : 11 48
GREATER              : 26
ID                   : 1 6 7 18 46
IF                   : 29
INT                  : 10 47
LEFT_CURVBR          : 12
LEFT_PAR             : 19 29 40
LESS                 : 25
MINUS                : 34 43
MULTIPLY             : 37
PLUS                 : 33 42
PRINT                : 19
PROGRAM              : 1
RIGHT_CURVBR         : 14
RIGHT_PAR            : 23 29 40
SEMICOLON            : 1 7 18 23
STRING               : 21
VAR                  : 5
error                : 

Nonterminals, with rules where they appear

asignacion           : 15
bloque               : 4 29 30
bloqueA              : 12 13
condicion            : 16
condicionA           : 29
empty                : 4 9 10 11 14 15 16 17 18 23 25 26 27 28 30 31 35 39 40 45 46 47 48
escritura            : 17
escrituraA           : 19 22
escrituraB           : 20 21
estatuto             : 13
exp                  : 24 25 26 27 33 34
expA                 : 32
expresion            : 18 20 29 40
expresionA           : 24
factor               : 36
factorA              : 41
factorB              : 42 43 44
program              : 0
programA             : 1
programB             : 2 3
termino              : 32 37 38
terminoA             : 36
tipo                 : 7
varcte               : 45
vars                 : 2
varsA                : 5 6 8
varsB                : 7

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON programA

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON programA

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON programA

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . programA
    (2) programA -> . vars programB
    (3) programA -> . programB
    (5) vars -> . VAR varsA
    (4) programB -> . bloque empty
    (12) bloque -> . LEFT_CURVBR bloqueA

    VAR             shift and go to state 8
    LEFT_CURVBR     shift and go to state 10

    programA                       shift and go to state 5
    vars                           shift and go to state 6
    programB                       shift and go to state 7
    bloque                         shift and go to state 9

state 5

    (1) program -> PROGRAM ID SEMICOLON programA .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON programA .)


state 6

    (2) programA -> vars . programB
    (4) programB -> . bloque empty
    (12) bloque -> . LEFT_CURVBR bloqueA

    LEFT_CURVBR     shift and go to state 10

    programB                       shift and go to state 11
    bloque                         shift and go to state 9

state 7

    (3) programA -> programB .

    $end            reduce using rule 3 (programA -> programB .)


state 8

    (5) vars -> VAR . varsA
    (6) varsA -> . ID COMMA varsA
    (7) varsA -> . ID COLON tipo SEMICOLON varsB

    ID              shift and go to state 13

    varsA                          shift and go to state 12

state 9

    (4) programB -> bloque . empty
    (49) empty -> .

    $end            reduce using rule 49 (empty -> .)

    empty                          shift and go to state 14

state 10

    (12) bloque -> LEFT_CURVBR . bloqueA
    (13) bloqueA -> . estatuto bloqueA
    (14) bloqueA -> . RIGHT_CURVBR empty
    (15) estatuto -> . asignacion empty
    (16) estatuto -> . condicion empty
    (17) estatuto -> . escritura empty
    (18) asignacion -> . ID EQUAL expresion SEMICOLON empty
    (29) condicion -> . IF LEFT_PAR expresion RIGHT_PAR bloque condicionA
    (19) escritura -> . PRINT LEFT_PAR escrituraA

    RIGHT_CURVBR    shift and go to state 17
    ID              shift and go to state 21
    IF              shift and go to state 22
    PRINT           shift and go to state 23

    bloqueA                        shift and go to state 15
    estatuto                       shift and go to state 16
    asignacion                     shift and go to state 18
    condicion                      shift and go to state 19
    escritura                      shift and go to state 20

state 11

    (2) programA -> vars programB .

    $end            reduce using rule 2 (programA -> vars programB .)


state 12

    (5) vars -> VAR varsA .

    LEFT_CURVBR     reduce using rule 5 (vars -> VAR varsA .)


state 13

    (6) varsA -> ID . COMMA varsA
    (7) varsA -> ID . COLON tipo SEMICOLON varsB

    COMMA           shift and go to state 24
    COLON           shift and go to state 25


state 14

    (4) programB -> bloque empty .

    $end            reduce using rule 4 (programB -> bloque empty .)


state 15

    (12) bloque -> LEFT_CURVBR bloqueA .

    $end            reduce using rule 12 (bloque -> LEFT_CURVBR bloqueA .)
    ELSE            reduce using rule 12 (bloque -> LEFT_CURVBR bloqueA .)
    RIGHT_CURVBR    reduce using rule 12 (bloque -> LEFT_CURVBR bloqueA .)
    ID              reduce using rule 12 (bloque -> LEFT_CURVBR bloqueA .)
    IF              reduce using rule 12 (bloque -> LEFT_CURVBR bloqueA .)
    PRINT           reduce using rule 12 (bloque -> LEFT_CURVBR bloqueA .)


state 16

    (13) bloqueA -> estatuto . bloqueA
    (13) bloqueA -> . estatuto bloqueA
    (14) bloqueA -> . RIGHT_CURVBR empty
    (15) estatuto -> . asignacion empty
    (16) estatuto -> . condicion empty
    (17) estatuto -> . escritura empty
    (18) asignacion -> . ID EQUAL expresion SEMICOLON empty
    (29) condicion -> . IF LEFT_PAR expresion RIGHT_PAR bloque condicionA
    (19) escritura -> . PRINT LEFT_PAR escrituraA

    RIGHT_CURVBR    shift and go to state 17
    ID              shift and go to state 21
    IF              shift and go to state 22
    PRINT           shift and go to state 23

    estatuto                       shift and go to state 16
    bloqueA                        shift and go to state 26
    asignacion                     shift and go to state 18
    condicion                      shift and go to state 19
    escritura                      shift and go to state 20

state 17

    (14) bloqueA -> RIGHT_CURVBR . empty
    (49) empty -> .

    $end            reduce using rule 49 (empty -> .)
    ELSE            reduce using rule 49 (empty -> .)
    RIGHT_CURVBR    reduce using rule 49 (empty -> .)
    ID              reduce using rule 49 (empty -> .)
    IF              reduce using rule 49 (empty -> .)
    PRINT           reduce using rule 49 (empty -> .)

    empty                          shift and go to state 27

state 18

    (15) estatuto -> asignacion . empty
    (49) empty -> .

    RIGHT_CURVBR    reduce using rule 49 (empty -> .)
    ID              reduce using rule 49 (empty -> .)
    IF              reduce using rule 49 (empty -> .)
    PRINT           reduce using rule 49 (empty -> .)

    empty                          shift and go to state 28

state 19

    (16) estatuto -> condicion . empty
    (49) empty -> .

    RIGHT_CURVBR    reduce using rule 49 (empty -> .)
    ID              reduce using rule 49 (empty -> .)
    IF              reduce using rule 49 (empty -> .)
    PRINT           reduce using rule 49 (empty -> .)

    empty                          shift and go to state 29

state 20

    (17) estatuto -> escritura . empty
    (49) empty -> .

    RIGHT_CURVBR    reduce using rule 49 (empty -> .)
    ID              reduce using rule 49 (empty -> .)
    IF              reduce using rule 49 (empty -> .)
    PRINT           reduce using rule 49 (empty -> .)

    empty                          shift and go to state 30

state 21

    (18) asignacion -> ID . EQUAL expresion SEMICOLON empty

    EQUAL           shift and go to state 31


state 22

    (29) condicion -> IF . LEFT_PAR expresion RIGHT_PAR bloque condicionA

    LEFT_PAR        shift and go to state 32


state 23

    (19) escritura -> PRINT . LEFT_PAR escrituraA

    LEFT_PAR        shift and go to state 33


state 24

    (6) varsA -> ID COMMA . varsA
    (6) varsA -> . ID COMMA varsA
    (7) varsA -> . ID COLON tipo SEMICOLON varsB

    ID              shift and go to state 13

    varsA                          shift and go to state 34

state 25

    (7) varsA -> ID COLON . tipo SEMICOLON varsB
    (10) tipo -> . INT empty
    (11) tipo -> . FLOAT empty

    INT             shift and go to state 36
    FLOAT           shift and go to state 37

    tipo                           shift and go to state 35

state 26

    (13) bloqueA -> estatuto bloqueA .

    $end            reduce using rule 13 (bloqueA -> estatuto bloqueA .)
    ELSE            reduce using rule 13 (bloqueA -> estatuto bloqueA .)
    RIGHT_CURVBR    reduce using rule 13 (bloqueA -> estatuto bloqueA .)
    ID              reduce using rule 13 (bloqueA -> estatuto bloqueA .)
    IF              reduce using rule 13 (bloqueA -> estatuto bloqueA .)
    PRINT           reduce using rule 13 (bloqueA -> estatuto bloqueA .)


state 27

    (14) bloqueA -> RIGHT_CURVBR empty .

    $end            reduce using rule 14 (bloqueA -> RIGHT_CURVBR empty .)
    ELSE            reduce using rule 14 (bloqueA -> RIGHT_CURVBR empty .)
    RIGHT_CURVBR    reduce using rule 14 (bloqueA -> RIGHT_CURVBR empty .)
    ID              reduce using rule 14 (bloqueA -> RIGHT_CURVBR empty .)
    IF              reduce using rule 14 (bloqueA -> RIGHT_CURVBR empty .)
    PRINT           reduce using rule 14 (bloqueA -> RIGHT_CURVBR empty .)


state 28

    (15) estatuto -> asignacion empty .

    RIGHT_CURVBR    reduce using rule 15 (estatuto -> asignacion empty .)
    ID              reduce using rule 15 (estatuto -> asignacion empty .)
    IF              reduce using rule 15 (estatuto -> asignacion empty .)
    PRINT           reduce using rule 15 (estatuto -> asignacion empty .)


state 29

    (16) estatuto -> condicion empty .

    RIGHT_CURVBR    reduce using rule 16 (estatuto -> condicion empty .)
    ID              reduce using rule 16 (estatuto -> condicion empty .)
    IF              reduce using rule 16 (estatuto -> condicion empty .)
    PRINT           reduce using rule 16 (estatuto -> condicion empty .)


state 30

    (17) estatuto -> escritura empty .

    RIGHT_CURVBR    reduce using rule 17 (estatuto -> escritura empty .)
    ID              reduce using rule 17 (estatuto -> escritura empty .)
    IF              reduce using rule 17 (estatuto -> escritura empty .)
    PRINT           reduce using rule 17 (estatuto -> escritura empty .)


state 31

    (18) asignacion -> ID EQUAL . expresion SEMICOLON empty
    (24) expresion -> . exp expresionA
    (32) exp -> . termino expA
    (36) termino -> . factor terminoA
    (40) factor -> . LEFT_PAR expresion RIGHT_PAR empty
    (41) factor -> . factorA
    (42) factorA -> . PLUS factorB
    (43) factorA -> . MINUS factorB
    (44) factorA -> . factorB
    (45) factorB -> . varcte empty
    (46) varcte -> . ID empty
    (47) varcte -> . INT empty
    (48) varcte -> . FLOAT empty

    LEFT_PAR        shift and go to state 43
    PLUS            shift and go to state 45
    MINUS           shift and go to state 47
    ID              shift and go to state 38
    INT             shift and go to state 49
    FLOAT           shift and go to state 50

    expresion                      shift and go to state 39
    exp                            shift and go to state 40
    termino                        shift and go to state 41
    factor                         shift and go to state 42
    factorA                        shift and go to state 44
    factorB                        shift and go to state 46
    varcte                         shift and go to state 48

state 32

    (29) condicion -> IF LEFT_PAR . expresion RIGHT_PAR bloque condicionA
    (24) expresion -> . exp expresionA
    (32) exp -> . termino expA
    (36) termino -> . factor terminoA
    (40) factor -> . LEFT_PAR expresion RIGHT_PAR empty
    (41) factor -> . factorA
    (42) factorA -> . PLUS factorB
    (43) factorA -> . MINUS factorB
    (44) factorA -> . factorB
    (45) factorB -> . varcte empty
    (46) varcte -> . ID empty
    (47) varcte -> . INT empty
    (48) varcte -> . FLOAT empty

    LEFT_PAR        shift and go to state 43
    PLUS            shift and go to state 45
    MINUS           shift and go to state 47
    ID              shift and go to state 38
    INT             shift and go to state 49
    FLOAT           shift and go to state 50

    expresion                      shift and go to state 51
    exp                            shift and go to state 40
    termino                        shift and go to state 41
    factor                         shift and go to state 42
    factorA                        shift and go to state 44
    factorB                        shift and go to state 46
    varcte                         shift and go to state 48

state 33

    (19) escritura -> PRINT LEFT_PAR . escrituraA
    (20) escrituraA -> . expresion escrituraB
    (21) escrituraA -> . STRING escrituraB
    (24) expresion -> . exp expresionA
    (32) exp -> . termino expA
    (36) termino -> . factor terminoA
    (40) factor -> . LEFT_PAR expresion RIGHT_PAR empty
    (41) factor -> . factorA
    (42) factorA -> . PLUS factorB
    (43) factorA -> . MINUS factorB
    (44) factorA -> . factorB
    (45) factorB -> . varcte empty
    (46) varcte -> . ID empty
    (47) varcte -> . INT empty
    (48) varcte -> . FLOAT empty

    STRING          shift and go to state 54
    LEFT_PAR        shift and go to state 43
    PLUS            shift and go to state 45
    MINUS           shift and go to state 47
    ID              shift and go to state 38
    INT             shift and go to state 49
    FLOAT           shift and go to state 50

    escrituraA                     shift and go to state 52
    expresion                      shift and go to state 53
    exp                            shift and go to state 40
    termino                        shift and go to state 41
    factor                         shift and go to state 42
    factorA                        shift and go to state 44
    factorB                        shift and go to state 46
    varcte                         shift and go to state 48

state 34

    (6) varsA -> ID COMMA varsA .

    LEFT_CURVBR     reduce using rule 6 (varsA -> ID COMMA varsA .)


state 35

    (7) varsA -> ID COLON tipo . SEMICOLON varsB

    SEMICOLON       shift and go to state 55


state 36

    (10) tipo -> INT . empty
    (49) empty -> .

    SEMICOLON       reduce using rule 49 (empty -> .)

    empty                          shift and go to state 56

state 37

    (11) tipo -> FLOAT . empty
    (49) empty -> .

    SEMICOLON       reduce using rule 49 (empty -> .)

    empty                          shift and go to state 57

state 38

    (46) varcte -> ID . empty
    (49) empty -> .

    MULTIPLY        reduce using rule 49 (empty -> .)
    DIVIDE          reduce using rule 49 (empty -> .)
    PLUS            reduce using rule 49 (empty -> .)
    MINUS           reduce using rule 49 (empty -> .)
    LESS            reduce using rule 49 (empty -> .)
    GREATER         reduce using rule 49 (empty -> .)
    DIFFERENT       reduce using rule 49 (empty -> .)
    SEMICOLON       reduce using rule 49 (empty -> .)
    RIGHT_PAR       reduce using rule 49 (empty -> .)
    COMMA           reduce using rule 49 (empty -> .)

    empty                          shift and go to state 58

state 39

    (18) asignacion -> ID EQUAL expresion . SEMICOLON empty

    SEMICOLON       shift and go to state 59


state 40

    (24) expresion -> exp . expresionA
    (25) expresionA -> . LESS exp empty
    (26) expresionA -> . GREATER exp empty
    (27) expresionA -> . DIFFERENT exp empty
    (28) expresionA -> . empty
    (49) empty -> .

    LESS            shift and go to state 61
    GREATER         shift and go to state 63
    DIFFERENT       shift and go to state 64
    SEMICOLON       reduce using rule 49 (empty -> .)
    RIGHT_PAR       reduce using rule 49 (empty -> .)
    COMMA           reduce using rule 49 (empty -> .)

    expresionA                     shift and go to state 60
    empty                          shift and go to state 62

state 41

    (32) exp -> termino . expA
    (33) expA -> . PLUS exp
    (34) expA -> . MINUS exp
    (35) expA -> . empty
    (49) empty -> .

    PLUS            shift and go to state 66
    MINUS           shift and go to state 67
    LESS            reduce using rule 49 (empty -> .)
    GREATER         reduce using rule 49 (empty -> .)
    DIFFERENT       reduce using rule 49 (empty -> .)
    SEMICOLON       reduce using rule 49 (empty -> .)
    RIGHT_PAR       reduce using rule 49 (empty -> .)
    COMMA           reduce using rule 49 (empty -> .)

    expA                           shift and go to state 65
    empty                          shift and go to state 68

state 42

    (36) termino -> factor . terminoA
    (37) terminoA -> . MULTIPLY termino
    (38) terminoA -> . DIVIDE termino
    (39) terminoA -> . empty
    (49) empty -> .

    MULTIPLY        shift and go to state 70
    DIVIDE          shift and go to state 71
    PLUS            reduce using rule 49 (empty -> .)
    MINUS           reduce using rule 49 (empty -> .)
    LESS            reduce using rule 49 (empty -> .)
    GREATER         reduce using rule 49 (empty -> .)
    DIFFERENT       reduce using rule 49 (empty -> .)
    SEMICOLON       reduce using rule 49 (empty -> .)
    RIGHT_PAR       reduce using rule 49 (empty -> .)
    COMMA           reduce using rule 49 (empty -> .)

    terminoA                       shift and go to state 69
    empty                          shift and go to state 72

state 43

    (40) factor -> LEFT_PAR . expresion RIGHT_PAR empty
    (24) expresion -> . exp expresionA
    (32) exp -> . termino expA
    (36) termino -> . factor terminoA
    (40) factor -> . LEFT_PAR expresion RIGHT_PAR empty
    (41) factor -> . factorA
    (42) factorA -> . PLUS factorB
    (43) factorA -> . MINUS factorB
    (44) factorA -> . factorB
    (45) factorB -> . varcte empty
    (46) varcte -> . ID empty
    (47) varcte -> . INT empty
    (48) varcte -> . FLOAT empty

    LEFT_PAR        shift and go to state 43
    PLUS            shift and go to state 45
    MINUS           shift and go to state 47
    ID              shift and go to state 38
    INT             shift and go to state 49
    FLOAT           shift and go to state 50

    expresion                      shift and go to state 73
    exp                            shift and go to state 40
    termino                        shift and go to state 41
    factor                         shift and go to state 42
    factorA                        shift and go to state 44
    factorB                        shift and go to state 46
    varcte                         shift and go to state 48

state 44

    (41) factor -> factorA .

    MULTIPLY        reduce using rule 41 (factor -> factorA .)
    DIVIDE          reduce using rule 41 (factor -> factorA .)
    PLUS            reduce using rule 41 (factor -> factorA .)
    MINUS           reduce using rule 41 (factor -> factorA .)
    LESS            reduce using rule 41 (factor -> factorA .)
    GREATER         reduce using rule 41 (factor -> factorA .)
    DIFFERENT       reduce using rule 41 (factor -> factorA .)
    SEMICOLON       reduce using rule 41 (factor -> factorA .)
    RIGHT_PAR       reduce using rule 41 (factor -> factorA .)
    COMMA           reduce using rule 41 (factor -> factorA .)


state 45

    (42) factorA -> PLUS . factorB
    (45) factorB -> . varcte empty
    (46) varcte -> . ID empty
    (47) varcte -> . INT empty
    (48) varcte -> . FLOAT empty

    ID              shift and go to state 38
    INT             shift and go to state 49
    FLOAT           shift and go to state 50

    factorB                        shift and go to state 74
    varcte                         shift and go to state 48

state 46

    (44) factorA -> factorB .

    MULTIPLY        reduce using rule 44 (factorA -> factorB .)
    DIVIDE          reduce using rule 44 (factorA -> factorB .)
    PLUS            reduce using rule 44 (factorA -> factorB .)
    MINUS           reduce using rule 44 (factorA -> factorB .)
    LESS            reduce using rule 44 (factorA -> factorB .)
    GREATER         reduce using rule 44 (factorA -> factorB .)
    DIFFERENT       reduce using rule 44 (factorA -> factorB .)
    SEMICOLON       reduce using rule 44 (factorA -> factorB .)
    RIGHT_PAR       reduce using rule 44 (factorA -> factorB .)
    COMMA           reduce using rule 44 (factorA -> factorB .)


state 47

    (43) factorA -> MINUS . factorB
    (45) factorB -> . varcte empty
    (46) varcte -> . ID empty
    (47) varcte -> . INT empty
    (48) varcte -> . FLOAT empty

    ID              shift and go to state 38
    INT             shift and go to state 49
    FLOAT           shift and go to state 50

    factorB                        shift and go to state 75
    varcte                         shift and go to state 48

state 48

    (45) factorB -> varcte . empty
    (49) empty -> .

    MULTIPLY        reduce using rule 49 (empty -> .)
    DIVIDE          reduce using rule 49 (empty -> .)
    PLUS            reduce using rule 49 (empty -> .)
    MINUS           reduce using rule 49 (empty -> .)
    LESS            reduce using rule 49 (empty -> .)
    GREATER         reduce using rule 49 (empty -> .)
    DIFFERENT       reduce using rule 49 (empty -> .)
    SEMICOLON       reduce using rule 49 (empty -> .)
    RIGHT_PAR       reduce using rule 49 (empty -> .)
    COMMA           reduce using rule 49 (empty -> .)

    empty                          shift and go to state 76

state 49

    (47) varcte -> INT . empty
    (49) empty -> .

    MULTIPLY        reduce using rule 49 (empty -> .)
    DIVIDE          reduce using rule 49 (empty -> .)
    PLUS            reduce using rule 49 (empty -> .)
    MINUS           reduce using rule 49 (empty -> .)
    LESS            reduce using rule 49 (empty -> .)
    GREATER         reduce using rule 49 (empty -> .)
    DIFFERENT       reduce using rule 49 (empty -> .)
    SEMICOLON       reduce using rule 49 (empty -> .)
    RIGHT_PAR       reduce using rule 49 (empty -> .)
    COMMA           reduce using rule 49 (empty -> .)

    empty                          shift and go to state 77

state 50

    (48) varcte -> FLOAT . empty
    (49) empty -> .

    MULTIPLY        reduce using rule 49 (empty -> .)
    DIVIDE          reduce using rule 49 (empty -> .)
    PLUS            reduce using rule 49 (empty -> .)
    MINUS           reduce using rule 49 (empty -> .)
    LESS            reduce using rule 49 (empty -> .)
    GREATER         reduce using rule 49 (empty -> .)
    DIFFERENT       reduce using rule 49 (empty -> .)
    SEMICOLON       reduce using rule 49 (empty -> .)
    RIGHT_PAR       reduce using rule 49 (empty -> .)
    COMMA           reduce using rule 49 (empty -> .)

    empty                          shift and go to state 78

state 51

    (29) condicion -> IF LEFT_PAR expresion . RIGHT_PAR bloque condicionA

    RIGHT_PAR       shift and go to state 79


state 52

    (19) escritura -> PRINT LEFT_PAR escrituraA .

    RIGHT_CURVBR    reduce using rule 19 (escritura -> PRINT LEFT_PAR escrituraA .)
    ID              reduce using rule 19 (escritura -> PRINT LEFT_PAR escrituraA .)
    IF              reduce using rule 19 (escritura -> PRINT LEFT_PAR escrituraA .)
    PRINT           reduce using rule 19 (escritura -> PRINT LEFT_PAR escrituraA .)


state 53

    (20) escrituraA -> expresion . escrituraB
    (22) escrituraB -> . COMMA escrituraA
    (23) escrituraB -> . RIGHT_PAR SEMICOLON empty

    COMMA           shift and go to state 81
    RIGHT_PAR       shift and go to state 82

    escrituraB                     shift and go to state 80

state 54

    (21) escrituraA -> STRING . escrituraB
    (22) escrituraB -> . COMMA escrituraA
    (23) escrituraB -> . RIGHT_PAR SEMICOLON empty

    COMMA           shift and go to state 81
    RIGHT_PAR       shift and go to state 82

    escrituraB                     shift and go to state 83

state 55

    (7) varsA -> ID COLON tipo SEMICOLON . varsB
    (8) varsB -> . varsA
    (9) varsB -> . empty
    (6) varsA -> . ID COMMA varsA
    (7) varsA -> . ID COLON tipo SEMICOLON varsB
    (49) empty -> .

    ID              shift and go to state 13
    LEFT_CURVBR     reduce using rule 49 (empty -> .)

    varsB                          shift and go to state 84
    varsA                          shift and go to state 85
    empty                          shift and go to state 86

state 56

    (10) tipo -> INT empty .

    SEMICOLON       reduce using rule 10 (tipo -> INT empty .)


state 57

    (11) tipo -> FLOAT empty .

    SEMICOLON       reduce using rule 11 (tipo -> FLOAT empty .)


state 58

    (46) varcte -> ID empty .

    MULTIPLY        reduce using rule 46 (varcte -> ID empty .)
    DIVIDE          reduce using rule 46 (varcte -> ID empty .)
    PLUS            reduce using rule 46 (varcte -> ID empty .)
    MINUS           reduce using rule 46 (varcte -> ID empty .)
    LESS            reduce using rule 46 (varcte -> ID empty .)
    GREATER         reduce using rule 46 (varcte -> ID empty .)
    DIFFERENT       reduce using rule 46 (varcte -> ID empty .)
    SEMICOLON       reduce using rule 46 (varcte -> ID empty .)
    RIGHT_PAR       reduce using rule 46 (varcte -> ID empty .)
    COMMA           reduce using rule 46 (varcte -> ID empty .)


state 59

    (18) asignacion -> ID EQUAL expresion SEMICOLON . empty
    (49) empty -> .

    RIGHT_CURVBR    reduce using rule 49 (empty -> .)
    ID              reduce using rule 49 (empty -> .)
    IF              reduce using rule 49 (empty -> .)
    PRINT           reduce using rule 49 (empty -> .)

    empty                          shift and go to state 87

state 60

    (24) expresion -> exp expresionA .

    SEMICOLON       reduce using rule 24 (expresion -> exp expresionA .)
    RIGHT_PAR       reduce using rule 24 (expresion -> exp expresionA .)
    COMMA           reduce using rule 24 (expresion -> exp expresionA .)


state 61

    (25) expresionA -> LESS . exp empty
    (32) exp -> . termino expA
    (36) termino -> . factor terminoA
    (40) factor -> . LEFT_PAR expresion RIGHT_PAR empty
    (41) factor -> . factorA
    (42) factorA -> . PLUS factorB
    (43) factorA -> . MINUS factorB
    (44) factorA -> . factorB
    (45) factorB -> . varcte empty
    (46) varcte -> . ID empty
    (47) varcte -> . INT empty
    (48) varcte -> . FLOAT empty

    LEFT_PAR        shift and go to state 43
    PLUS            shift and go to state 45
    MINUS           shift and go to state 47
    ID              shift and go to state 38
    INT             shift and go to state 49
    FLOAT           shift and go to state 50

    exp                            shift and go to state 88
    termino                        shift and go to state 41
    factor                         shift and go to state 42
    factorA                        shift and go to state 44
    factorB                        shift and go to state 46
    varcte                         shift and go to state 48

state 62

    (28) expresionA -> empty .

    SEMICOLON       reduce using rule 28 (expresionA -> empty .)
    RIGHT_PAR       reduce using rule 28 (expresionA -> empty .)
    COMMA           reduce using rule 28 (expresionA -> empty .)


state 63

    (26) expresionA -> GREATER . exp empty
    (32) exp -> . termino expA
    (36) termino -> . factor terminoA
    (40) factor -> . LEFT_PAR expresion RIGHT_PAR empty
    (41) factor -> . factorA
    (42) factorA -> . PLUS factorB
    (43) factorA -> . MINUS factorB
    (44) factorA -> . factorB
    (45) factorB -> . varcte empty
    (46) varcte -> . ID empty
    (47) varcte -> . INT empty
    (48) varcte -> . FLOAT empty

    LEFT_PAR        shift and go to state 43
    PLUS            shift and go to state 45
    MINUS           shift and go to state 47
    ID              shift and go to state 38
    INT             shift and go to state 49
    FLOAT           shift and go to state 50

    exp                            shift and go to state 89
    termino                        shift and go to state 41
    factor                         shift and go to state 42
    factorA                        shift and go to state 44
    factorB                        shift and go to state 46
    varcte                         shift and go to state 48

state 64

    (27) expresionA -> DIFFERENT . exp empty
    (32) exp -> . termino expA
    (36) termino -> . factor terminoA
    (40) factor -> . LEFT_PAR expresion RIGHT_PAR empty
    (41) factor -> . factorA
    (42) factorA -> . PLUS factorB
    (43) factorA -> . MINUS factorB
    (44) factorA -> . factorB
    (45) factorB -> . varcte empty
    (46) varcte -> . ID empty
    (47) varcte -> . INT empty
    (48) varcte -> . FLOAT empty

    LEFT_PAR        shift and go to state 43
    PLUS            shift and go to state 45
    MINUS           shift and go to state 47
    ID              shift and go to state 38
    INT             shift and go to state 49
    FLOAT           shift and go to state 50

    exp                            shift and go to state 90
    termino                        shift and go to state 41
    factor                         shift and go to state 42
    factorA                        shift and go to state 44
    factorB                        shift and go to state 46
    varcte                         shift and go to state 48

state 65

    (32) exp -> termino expA .

    LESS            reduce using rule 32 (exp -> termino expA .)
    GREATER         reduce using rule 32 (exp -> termino expA .)
    DIFFERENT       reduce using rule 32 (exp -> termino expA .)
    SEMICOLON       reduce using rule 32 (exp -> termino expA .)
    RIGHT_PAR       reduce using rule 32 (exp -> termino expA .)
    COMMA           reduce using rule 32 (exp -> termino expA .)


state 66

    (33) expA -> PLUS . exp
    (32) exp -> . termino expA
    (36) termino -> . factor terminoA
    (40) factor -> . LEFT_PAR expresion RIGHT_PAR empty
    (41) factor -> . factorA
    (42) factorA -> . PLUS factorB
    (43) factorA -> . MINUS factorB
    (44) factorA -> . factorB
    (45) factorB -> . varcte empty
    (46) varcte -> . ID empty
    (47) varcte -> . INT empty
    (48) varcte -> . FLOAT empty

    LEFT_PAR        shift and go to state 43
    PLUS            shift and go to state 45
    MINUS           shift and go to state 47
    ID              shift and go to state 38
    INT             shift and go to state 49
    FLOAT           shift and go to state 50

    exp                            shift and go to state 91
    termino                        shift and go to state 41
    factor                         shift and go to state 42
    factorA                        shift and go to state 44
    factorB                        shift and go to state 46
    varcte                         shift and go to state 48

state 67

    (34) expA -> MINUS . exp
    (32) exp -> . termino expA
    (36) termino -> . factor terminoA
    (40) factor -> . LEFT_PAR expresion RIGHT_PAR empty
    (41) factor -> . factorA
    (42) factorA -> . PLUS factorB
    (43) factorA -> . MINUS factorB
    (44) factorA -> . factorB
    (45) factorB -> . varcte empty
    (46) varcte -> . ID empty
    (47) varcte -> . INT empty
    (48) varcte -> . FLOAT empty

    LEFT_PAR        shift and go to state 43
    PLUS            shift and go to state 45
    MINUS           shift and go to state 47
    ID              shift and go to state 38
    INT             shift and go to state 49
    FLOAT           shift and go to state 50

    exp                            shift and go to state 92
    termino                        shift and go to state 41
    factor                         shift and go to state 42
    factorA                        shift and go to state 44
    factorB                        shift and go to state 46
    varcte                         shift and go to state 48

state 68

    (35) expA -> empty .

    LESS            reduce using rule 35 (expA -> empty .)
    GREATER         reduce using rule 35 (expA -> empty .)
    DIFFERENT       reduce using rule 35 (expA -> empty .)
    SEMICOLON       reduce using rule 35 (expA -> empty .)
    RIGHT_PAR       reduce using rule 35 (expA -> empty .)
    COMMA           reduce using rule 35 (expA -> empty .)


state 69

    (36) termino -> factor terminoA .

    PLUS            reduce using rule 36 (termino -> factor terminoA .)
    MINUS           reduce using rule 36 (termino -> factor terminoA .)
    LESS            reduce using rule 36 (termino -> factor terminoA .)
    GREATER         reduce using rule 36 (termino -> factor terminoA .)
    DIFFERENT       reduce using rule 36 (termino -> factor terminoA .)
    SEMICOLON       reduce using rule 36 (termino -> factor terminoA .)
    RIGHT_PAR       reduce using rule 36 (termino -> factor terminoA .)
    COMMA           reduce using rule 36 (termino -> factor terminoA .)


state 70

    (37) terminoA -> MULTIPLY . termino
    (36) termino -> . factor terminoA
    (40) factor -> . LEFT_PAR expresion RIGHT_PAR empty
    (41) factor -> . factorA
    (42) factorA -> . PLUS factorB
    (43) factorA -> . MINUS factorB
    (44) factorA -> . factorB
    (45) factorB -> . varcte empty
    (46) varcte -> . ID empty
    (47) varcte -> . INT empty
    (48) varcte -> . FLOAT empty

    LEFT_PAR        shift and go to state 43
    PLUS            shift and go to state 45
    MINUS           shift and go to state 47
    ID              shift and go to state 38
    INT             shift and go to state 49
    FLOAT           shift and go to state 50

    termino                        shift and go to state 93
    factor                         shift and go to state 42
    factorA                        shift and go to state 44
    factorB                        shift and go to state 46
    varcte                         shift and go to state 48

state 71

    (38) terminoA -> DIVIDE . termino
    (36) termino -> . factor terminoA
    (40) factor -> . LEFT_PAR expresion RIGHT_PAR empty
    (41) factor -> . factorA
    (42) factorA -> . PLUS factorB
    (43) factorA -> . MINUS factorB
    (44) factorA -> . factorB
    (45) factorB -> . varcte empty
    (46) varcte -> . ID empty
    (47) varcte -> . INT empty
    (48) varcte -> . FLOAT empty

    LEFT_PAR        shift and go to state 43
    PLUS            shift and go to state 45
    MINUS           shift and go to state 47
    ID              shift and go to state 38
    INT             shift and go to state 49
    FLOAT           shift and go to state 50

    termino                        shift and go to state 94
    factor                         shift and go to state 42
    factorA                        shift and go to state 44
    factorB                        shift and go to state 46
    varcte                         shift and go to state 48

state 72

    (39) terminoA -> empty .

    PLUS            reduce using rule 39 (terminoA -> empty .)
    MINUS           reduce using rule 39 (terminoA -> empty .)
    LESS            reduce using rule 39 (terminoA -> empty .)
    GREATER         reduce using rule 39 (terminoA -> empty .)
    DIFFERENT       reduce using rule 39 (terminoA -> empty .)
    SEMICOLON       reduce using rule 39 (terminoA -> empty .)
    RIGHT_PAR       reduce using rule 39 (terminoA -> empty .)
    COMMA           reduce using rule 39 (terminoA -> empty .)


state 73

    (40) factor -> LEFT_PAR expresion . RIGHT_PAR empty

    RIGHT_PAR       shift and go to state 95


state 74

    (42) factorA -> PLUS factorB .

    MULTIPLY        reduce using rule 42 (factorA -> PLUS factorB .)
    DIVIDE          reduce using rule 42 (factorA -> PLUS factorB .)
    PLUS            reduce using rule 42 (factorA -> PLUS factorB .)
    MINUS           reduce using rule 42 (factorA -> PLUS factorB .)
    LESS            reduce using rule 42 (factorA -> PLUS factorB .)
    GREATER         reduce using rule 42 (factorA -> PLUS factorB .)
    DIFFERENT       reduce using rule 42 (factorA -> PLUS factorB .)
    SEMICOLON       reduce using rule 42 (factorA -> PLUS factorB .)
    RIGHT_PAR       reduce using rule 42 (factorA -> PLUS factorB .)
    COMMA           reduce using rule 42 (factorA -> PLUS factorB .)


state 75

    (43) factorA -> MINUS factorB .

    MULTIPLY        reduce using rule 43 (factorA -> MINUS factorB .)
    DIVIDE          reduce using rule 43 (factorA -> MINUS factorB .)
    PLUS            reduce using rule 43 (factorA -> MINUS factorB .)
    MINUS           reduce using rule 43 (factorA -> MINUS factorB .)
    LESS            reduce using rule 43 (factorA -> MINUS factorB .)
    GREATER         reduce using rule 43 (factorA -> MINUS factorB .)
    DIFFERENT       reduce using rule 43 (factorA -> MINUS factorB .)
    SEMICOLON       reduce using rule 43 (factorA -> MINUS factorB .)
    RIGHT_PAR       reduce using rule 43 (factorA -> MINUS factorB .)
    COMMA           reduce using rule 43 (factorA -> MINUS factorB .)


state 76

    (45) factorB -> varcte empty .

    MULTIPLY        reduce using rule 45 (factorB -> varcte empty .)
    DIVIDE          reduce using rule 45 (factorB -> varcte empty .)
    PLUS            reduce using rule 45 (factorB -> varcte empty .)
    MINUS           reduce using rule 45 (factorB -> varcte empty .)
    LESS            reduce using rule 45 (factorB -> varcte empty .)
    GREATER         reduce using rule 45 (factorB -> varcte empty .)
    DIFFERENT       reduce using rule 45 (factorB -> varcte empty .)
    SEMICOLON       reduce using rule 45 (factorB -> varcte empty .)
    RIGHT_PAR       reduce using rule 45 (factorB -> varcte empty .)
    COMMA           reduce using rule 45 (factorB -> varcte empty .)


state 77

    (47) varcte -> INT empty .

    MULTIPLY        reduce using rule 47 (varcte -> INT empty .)
    DIVIDE          reduce using rule 47 (varcte -> INT empty .)
    PLUS            reduce using rule 47 (varcte -> INT empty .)
    MINUS           reduce using rule 47 (varcte -> INT empty .)
    LESS            reduce using rule 47 (varcte -> INT empty .)
    GREATER         reduce using rule 47 (varcte -> INT empty .)
    DIFFERENT       reduce using rule 47 (varcte -> INT empty .)
    SEMICOLON       reduce using rule 47 (varcte -> INT empty .)
    RIGHT_PAR       reduce using rule 47 (varcte -> INT empty .)
    COMMA           reduce using rule 47 (varcte -> INT empty .)


state 78

    (48) varcte -> FLOAT empty .

    MULTIPLY        reduce using rule 48 (varcte -> FLOAT empty .)
    DIVIDE          reduce using rule 48 (varcte -> FLOAT empty .)
    PLUS            reduce using rule 48 (varcte -> FLOAT empty .)
    MINUS           reduce using rule 48 (varcte -> FLOAT empty .)
    LESS            reduce using rule 48 (varcte -> FLOAT empty .)
    GREATER         reduce using rule 48 (varcte -> FLOAT empty .)
    DIFFERENT       reduce using rule 48 (varcte -> FLOAT empty .)
    SEMICOLON       reduce using rule 48 (varcte -> FLOAT empty .)
    RIGHT_PAR       reduce using rule 48 (varcte -> FLOAT empty .)
    COMMA           reduce using rule 48 (varcte -> FLOAT empty .)


state 79

    (29) condicion -> IF LEFT_PAR expresion RIGHT_PAR . bloque condicionA
    (12) bloque -> . LEFT_CURVBR bloqueA

    LEFT_CURVBR     shift and go to state 10

    bloque                         shift and go to state 96

state 80

    (20) escrituraA -> expresion escrituraB .

    RIGHT_CURVBR    reduce using rule 20 (escrituraA -> expresion escrituraB .)
    ID              reduce using rule 20 (escrituraA -> expresion escrituraB .)
    IF              reduce using rule 20 (escrituraA -> expresion escrituraB .)
    PRINT           reduce using rule 20 (escrituraA -> expresion escrituraB .)


state 81

    (22) escrituraB -> COMMA . escrituraA
    (20) escrituraA -> . expresion escrituraB
    (21) escrituraA -> . STRING escrituraB
    (24) expresion -> . exp expresionA
    (32) exp -> . termino expA
    (36) termino -> . factor terminoA
    (40) factor -> . LEFT_PAR expresion RIGHT_PAR empty
    (41) factor -> . factorA
    (42) factorA -> . PLUS factorB
    (43) factorA -> . MINUS factorB
    (44) factorA -> . factorB
    (45) factorB -> . varcte empty
    (46) varcte -> . ID empty
    (47) varcte -> . INT empty
    (48) varcte -> . FLOAT empty

    STRING          shift and go to state 54
    LEFT_PAR        shift and go to state 43
    PLUS            shift and go to state 45
    MINUS           shift and go to state 47
    ID              shift and go to state 38
    INT             shift and go to state 49
    FLOAT           shift and go to state 50

    escrituraA                     shift and go to state 97
    expresion                      shift and go to state 53
    exp                            shift and go to state 40
    termino                        shift and go to state 41
    factor                         shift and go to state 42
    factorA                        shift and go to state 44
    factorB                        shift and go to state 46
    varcte                         shift and go to state 48

state 82

    (23) escrituraB -> RIGHT_PAR . SEMICOLON empty

    SEMICOLON       shift and go to state 98


state 83

    (21) escrituraA -> STRING escrituraB .

    RIGHT_CURVBR    reduce using rule 21 (escrituraA -> STRING escrituraB .)
    ID              reduce using rule 21 (escrituraA -> STRING escrituraB .)
    IF              reduce using rule 21 (escrituraA -> STRING escrituraB .)
    PRINT           reduce using rule 21 (escrituraA -> STRING escrituraB .)


state 84

    (7) varsA -> ID COLON tipo SEMICOLON varsB .

    LEFT_CURVBR     reduce using rule 7 (varsA -> ID COLON tipo SEMICOLON varsB .)


state 85

    (8) varsB -> varsA .

    LEFT_CURVBR     reduce using rule 8 (varsB -> varsA .)


state 86

    (9) varsB -> empty .

    LEFT_CURVBR     reduce using rule 9 (varsB -> empty .)


state 87

    (18) asignacion -> ID EQUAL expresion SEMICOLON empty .

    RIGHT_CURVBR    reduce using rule 18 (asignacion -> ID EQUAL expresion SEMICOLON empty .)
    ID              reduce using rule 18 (asignacion -> ID EQUAL expresion SEMICOLON empty .)
    IF              reduce using rule 18 (asignacion -> ID EQUAL expresion SEMICOLON empty .)
    PRINT           reduce using rule 18 (asignacion -> ID EQUAL expresion SEMICOLON empty .)


state 88

    (25) expresionA -> LESS exp . empty
    (49) empty -> .

    SEMICOLON       reduce using rule 49 (empty -> .)
    RIGHT_PAR       reduce using rule 49 (empty -> .)
    COMMA           reduce using rule 49 (empty -> .)

    empty                          shift and go to state 99

state 89

    (26) expresionA -> GREATER exp . empty
    (49) empty -> .

    SEMICOLON       reduce using rule 49 (empty -> .)
    RIGHT_PAR       reduce using rule 49 (empty -> .)
    COMMA           reduce using rule 49 (empty -> .)

    empty                          shift and go to state 100

state 90

    (27) expresionA -> DIFFERENT exp . empty
    (49) empty -> .

    SEMICOLON       reduce using rule 49 (empty -> .)
    RIGHT_PAR       reduce using rule 49 (empty -> .)
    COMMA           reduce using rule 49 (empty -> .)

    empty                          shift and go to state 101

state 91

    (33) expA -> PLUS exp .

    LESS            reduce using rule 33 (expA -> PLUS exp .)
    GREATER         reduce using rule 33 (expA -> PLUS exp .)
    DIFFERENT       reduce using rule 33 (expA -> PLUS exp .)
    SEMICOLON       reduce using rule 33 (expA -> PLUS exp .)
    RIGHT_PAR       reduce using rule 33 (expA -> PLUS exp .)
    COMMA           reduce using rule 33 (expA -> PLUS exp .)


state 92

    (34) expA -> MINUS exp .

    LESS            reduce using rule 34 (expA -> MINUS exp .)
    GREATER         reduce using rule 34 (expA -> MINUS exp .)
    DIFFERENT       reduce using rule 34 (expA -> MINUS exp .)
    SEMICOLON       reduce using rule 34 (expA -> MINUS exp .)
    RIGHT_PAR       reduce using rule 34 (expA -> MINUS exp .)
    COMMA           reduce using rule 34 (expA -> MINUS exp .)


state 93

    (37) terminoA -> MULTIPLY termino .

    PLUS            reduce using rule 37 (terminoA -> MULTIPLY termino .)
    MINUS           reduce using rule 37 (terminoA -> MULTIPLY termino .)
    LESS            reduce using rule 37 (terminoA -> MULTIPLY termino .)
    GREATER         reduce using rule 37 (terminoA -> MULTIPLY termino .)
    DIFFERENT       reduce using rule 37 (terminoA -> MULTIPLY termino .)
    SEMICOLON       reduce using rule 37 (terminoA -> MULTIPLY termino .)
    RIGHT_PAR       reduce using rule 37 (terminoA -> MULTIPLY termino .)
    COMMA           reduce using rule 37 (terminoA -> MULTIPLY termino .)


state 94

    (38) terminoA -> DIVIDE termino .

    PLUS            reduce using rule 38 (terminoA -> DIVIDE termino .)
    MINUS           reduce using rule 38 (terminoA -> DIVIDE termino .)
    LESS            reduce using rule 38 (terminoA -> DIVIDE termino .)
    GREATER         reduce using rule 38 (terminoA -> DIVIDE termino .)
    DIFFERENT       reduce using rule 38 (terminoA -> DIVIDE termino .)
    SEMICOLON       reduce using rule 38 (terminoA -> DIVIDE termino .)
    RIGHT_PAR       reduce using rule 38 (terminoA -> DIVIDE termino .)
    COMMA           reduce using rule 38 (terminoA -> DIVIDE termino .)


state 95

    (40) factor -> LEFT_PAR expresion RIGHT_PAR . empty
    (49) empty -> .

    MULTIPLY        reduce using rule 49 (empty -> .)
    DIVIDE          reduce using rule 49 (empty -> .)
    PLUS            reduce using rule 49 (empty -> .)
    MINUS           reduce using rule 49 (empty -> .)
    LESS            reduce using rule 49 (empty -> .)
    GREATER         reduce using rule 49 (empty -> .)
    DIFFERENT       reduce using rule 49 (empty -> .)
    SEMICOLON       reduce using rule 49 (empty -> .)
    RIGHT_PAR       reduce using rule 49 (empty -> .)
    COMMA           reduce using rule 49 (empty -> .)

    empty                          shift and go to state 102

state 96

    (29) condicion -> IF LEFT_PAR expresion RIGHT_PAR bloque . condicionA
    (30) condicionA -> . ELSE bloque empty
    (31) condicionA -> . empty
    (49) empty -> .

    ELSE            shift and go to state 104
    RIGHT_CURVBR    reduce using rule 49 (empty -> .)
    ID              reduce using rule 49 (empty -> .)
    IF              reduce using rule 49 (empty -> .)
    PRINT           reduce using rule 49 (empty -> .)

    condicionA                     shift and go to state 103
    empty                          shift and go to state 105

state 97

    (22) escrituraB -> COMMA escrituraA .

    RIGHT_CURVBR    reduce using rule 22 (escrituraB -> COMMA escrituraA .)
    ID              reduce using rule 22 (escrituraB -> COMMA escrituraA .)
    IF              reduce using rule 22 (escrituraB -> COMMA escrituraA .)
    PRINT           reduce using rule 22 (escrituraB -> COMMA escrituraA .)


state 98

    (23) escrituraB -> RIGHT_PAR SEMICOLON . empty
    (49) empty -> .

    RIGHT_CURVBR    reduce using rule 49 (empty -> .)
    ID              reduce using rule 49 (empty -> .)
    IF              reduce using rule 49 (empty -> .)
    PRINT           reduce using rule 49 (empty -> .)

    empty                          shift and go to state 106

state 99

    (25) expresionA -> LESS exp empty .

    SEMICOLON       reduce using rule 25 (expresionA -> LESS exp empty .)
    RIGHT_PAR       reduce using rule 25 (expresionA -> LESS exp empty .)
    COMMA           reduce using rule 25 (expresionA -> LESS exp empty .)


state 100

    (26) expresionA -> GREATER exp empty .

    SEMICOLON       reduce using rule 26 (expresionA -> GREATER exp empty .)
    RIGHT_PAR       reduce using rule 26 (expresionA -> GREATER exp empty .)
    COMMA           reduce using rule 26 (expresionA -> GREATER exp empty .)


state 101

    (27) expresionA -> DIFFERENT exp empty .

    SEMICOLON       reduce using rule 27 (expresionA -> DIFFERENT exp empty .)
    RIGHT_PAR       reduce using rule 27 (expresionA -> DIFFERENT exp empty .)
    COMMA           reduce using rule 27 (expresionA -> DIFFERENT exp empty .)


state 102

    (40) factor -> LEFT_PAR expresion RIGHT_PAR empty .

    MULTIPLY        reduce using rule 40 (factor -> LEFT_PAR expresion RIGHT_PAR empty .)
    DIVIDE          reduce using rule 40 (factor -> LEFT_PAR expresion RIGHT_PAR empty .)
    PLUS            reduce using rule 40 (factor -> LEFT_PAR expresion RIGHT_PAR empty .)
    MINUS           reduce using rule 40 (factor -> LEFT_PAR expresion RIGHT_PAR empty .)
    LESS            reduce using rule 40 (factor -> LEFT_PAR expresion RIGHT_PAR empty .)
    GREATER         reduce using rule 40 (factor -> LEFT_PAR expresion RIGHT_PAR empty .)
    DIFFERENT       reduce using rule 40 (factor -> LEFT_PAR expresion RIGHT_PAR empty .)
    SEMICOLON       reduce using rule 40 (factor -> LEFT_PAR expresion RIGHT_PAR empty .)
    RIGHT_PAR       reduce using rule 40 (factor -> LEFT_PAR expresion RIGHT_PAR empty .)
    COMMA           reduce using rule 40 (factor -> LEFT_PAR expresion RIGHT_PAR empty .)


state 103

    (29) condicion -> IF LEFT_PAR expresion RIGHT_PAR bloque condicionA .

    RIGHT_CURVBR    reduce using rule 29 (condicion -> IF LEFT_PAR expresion RIGHT_PAR bloque condicionA .)
    ID              reduce using rule 29 (condicion -> IF LEFT_PAR expresion RIGHT_PAR bloque condicionA .)
    IF              reduce using rule 29 (condicion -> IF LEFT_PAR expresion RIGHT_PAR bloque condicionA .)
    PRINT           reduce using rule 29 (condicion -> IF LEFT_PAR expresion RIGHT_PAR bloque condicionA .)


state 104

    (30) condicionA -> ELSE . bloque empty
    (12) bloque -> . LEFT_CURVBR bloqueA

    LEFT_CURVBR     shift and go to state 10

    bloque                         shift and go to state 107

state 105

    (31) condicionA -> empty .

    RIGHT_CURVBR    reduce using rule 31 (condicionA -> empty .)
    ID              reduce using rule 31 (condicionA -> empty .)
    IF              reduce using rule 31 (condicionA -> empty .)
    PRINT           reduce using rule 31 (condicionA -> empty .)


state 106

    (23) escrituraB -> RIGHT_PAR SEMICOLON empty .

    RIGHT_CURVBR    reduce using rule 23 (escrituraB -> RIGHT_PAR SEMICOLON empty .)
    ID              reduce using rule 23 (escrituraB -> RIGHT_PAR SEMICOLON empty .)
    IF              reduce using rule 23 (escrituraB -> RIGHT_PAR SEMICOLON empty .)
    PRINT           reduce using rule 23 (escrituraB -> RIGHT_PAR SEMICOLON empty .)


state 107

    (30) condicionA -> ELSE bloque . empty
    (49) empty -> .

    RIGHT_CURVBR    reduce using rule 49 (empty -> .)
    ID              reduce using rule 49 (empty -> .)
    IF              reduce using rule 49 (empty -> .)
    PRINT           reduce using rule 49 (empty -> .)

    empty                          shift and go to state 108

state 108

    (30) condicionA -> ELSE bloque empty .

    RIGHT_CURVBR    reduce using rule 30 (condicionA -> ELSE bloque empty .)
    ID              reduce using rule 30 (condicionA -> ELSE bloque empty .)
    IF              reduce using rule 30 (condicionA -> ELSE bloque empty .)
    PRINT           reduce using rule 30 (condicionA -> ELSE bloque empty .)

