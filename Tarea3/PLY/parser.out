Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON programA
Rule 2     programA -> vars bloque empty
Rule 3     programA -> bloque empty
Rule 4     vars -> VAR varsA
Rule 5     varsA -> ID COMMA varsA
Rule 6     varsA -> ID COLON tipo SEMICOLON empty
Rule 7     varsA -> ID COLON tipo SEMICOLON varsA empty
Rule 8     tipo -> INT empty
Rule 9     tipo -> FLOAT empty
Rule 10    bloque -> LEFT_CURVBR bloqueA
Rule 11    bloque -> LEFT_CURVBR RIGHT_CURVBR empty
Rule 12    bloqueA -> estatuto RIGHT_CURVBR empty
Rule 13    bloqueA -> estatuto bloqueA
Rule 14    estatuto -> asignacion empty
Rule 15    estatuto -> condicion empty
Rule 16    estatuto -> escritura empty
Rule 17    asignacion -> ID EQUAL expresion SEMICOLON empty
Rule 18    condicion -> IF LEFT_PAR expresion RIGHT_PAR bloque condicionA
Rule 19    condicionA -> ELSE bloque SEMICOLON empty
Rule 20    condicionA -> SEMICOLON empty
Rule 21    escritura -> PRINT LEFT_PAR escrituraA
Rule 22    escrituraA -> expresion escrituraB
Rule 23    escrituraA -> STRING escrituraB
Rule 24    escrituraB -> COMMA escrituraA
Rule 25    escrituraB -> RIGHT_PAR SEMICOLON empty
Rule 26    expresion -> exp expresionA
Rule 27    expresionA -> LESS exp empty
Rule 28    expresionA -> GREATER exp empty
Rule 29    expresionA -> DIFFERENT exp empty
Rule 30    expresionA -> empty
Rule 31    exp -> termino expA
Rule 32    expA -> PLUS exp
Rule 33    expA -> MINUS exp
Rule 34    expA -> empty
Rule 35    termino -> factor terminoA
Rule 36    terminoA -> MULTIPLY termino
Rule 37    terminoA -> DIVIDE termino
Rule 38    terminoA -> empty
Rule 39    factor -> LEFT_PAR expresion RIGHT_PAR empty
Rule 40    factor -> factorA
Rule 41    factorA -> PLUS varcte empty
Rule 42    factorA -> MINUS varcte empty
Rule 43    factorA -> varcte empty
Rule 44    varcte -> ID empty
Rule 45    varcte -> INT empty
Rule 46    varcte -> FLOAT empty
Rule 47    empty -> <empty>

Terminals, with rules where they appear

COLON                : 6 7
COMMA                : 5 24
DIFFERENT            : 29
DIVIDE               : 37
ELSE                 : 19
EQUAL                : 17
FLOAT                : 9 46
GREATER              : 28
ID                   : 1 5 6 7 17 44
IF                   : 18
INT                  : 8 45
LEFT_CURVBR          : 10 11
LEFT_PAR             : 18 21 39
LESS                 : 27
MINUS                : 33 42
MULTIPLY             : 36
PLUS                 : 32 41
PRINT                : 21
PROGRAM              : 1
RIGHT_CURVBR         : 11 12
RIGHT_PAR            : 18 25 39
SEMICOLON            : 1 6 7 17 19 20 25
STRING               : 23
VAR                  : 4
error                : 

Nonterminals, with rules where they appear

asignacion           : 14
bloque               : 2 3 18 19
bloqueA              : 10 13
condicion            : 15
condicionA           : 18
empty                : 2 3 6 7 8 9 11 12 14 15 16 17 19 20 25 27 28 29 30 34 38 39 41 42 43 44 45 46
escritura            : 16
escrituraA           : 21 24
escrituraB           : 22 23
estatuto             : 12 13
exp                  : 26 27 28 29 32 33
expA                 : 31
expresion            : 17 18 22 39
expresionA           : 26
factor               : 35
factorA              : 40
program              : 0
programA             : 1
termino              : 31 36 37
terminoA             : 35
tipo                 : 6 7
varcte               : 41 42 43
vars                 : 2
varsA                : 4 5 7

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON programA

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON programA

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON programA

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . programA
    (2) programA -> . vars bloque empty
    (3) programA -> . bloque empty
    (4) vars -> . VAR varsA
    (10) bloque -> . LEFT_CURVBR bloqueA
    (11) bloque -> . LEFT_CURVBR RIGHT_CURVBR empty

    VAR             shift and go to state 8
    LEFT_CURVBR     shift and go to state 9

    programA                       shift and go to state 5
    vars                           shift and go to state 6
    bloque                         shift and go to state 7

state 5

    (1) program -> PROGRAM ID SEMICOLON programA .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON programA .)


state 6

    (2) programA -> vars . bloque empty
    (10) bloque -> . LEFT_CURVBR bloqueA
    (11) bloque -> . LEFT_CURVBR RIGHT_CURVBR empty

    LEFT_CURVBR     shift and go to state 9

    bloque                         shift and go to state 10

state 7

    (3) programA -> bloque . empty
    (47) empty -> .

    $end            reduce using rule 47 (empty -> .)

    empty                          shift and go to state 11

state 8

    (4) vars -> VAR . varsA
    (5) varsA -> . ID COMMA varsA
    (6) varsA -> . ID COLON tipo SEMICOLON empty
    (7) varsA -> . ID COLON tipo SEMICOLON varsA empty

    ID              shift and go to state 13

    varsA                          shift and go to state 12

state 9

    (10) bloque -> LEFT_CURVBR . bloqueA
    (11) bloque -> LEFT_CURVBR . RIGHT_CURVBR empty
    (12) bloqueA -> . estatuto RIGHT_CURVBR empty
    (13) bloqueA -> . estatuto bloqueA
    (14) estatuto -> . asignacion empty
    (15) estatuto -> . condicion empty
    (16) estatuto -> . escritura empty
    (17) asignacion -> . ID EQUAL expresion SEMICOLON empty
    (18) condicion -> . IF LEFT_PAR expresion RIGHT_PAR bloque condicionA
    (21) escritura -> . PRINT LEFT_PAR escrituraA

    RIGHT_CURVBR    shift and go to state 15
    ID              shift and go to state 20
    IF              shift and go to state 21
    PRINT           shift and go to state 22

    bloqueA                        shift and go to state 14
    estatuto                       shift and go to state 16
    asignacion                     shift and go to state 17
    condicion                      shift and go to state 18
    escritura                      shift and go to state 19

state 10

    (2) programA -> vars bloque . empty
    (47) empty -> .

    $end            reduce using rule 47 (empty -> .)

    empty                          shift and go to state 23

state 11

    (3) programA -> bloque empty .

    $end            reduce using rule 3 (programA -> bloque empty .)


state 12

    (4) vars -> VAR varsA .

    LEFT_CURVBR     reduce using rule 4 (vars -> VAR varsA .)


state 13

    (5) varsA -> ID . COMMA varsA
    (6) varsA -> ID . COLON tipo SEMICOLON empty
    (7) varsA -> ID . COLON tipo SEMICOLON varsA empty

    COMMA           shift and go to state 24
    COLON           shift and go to state 25


state 14

    (10) bloque -> LEFT_CURVBR bloqueA .

    $end            reduce using rule 10 (bloque -> LEFT_CURVBR bloqueA .)
    ELSE            reduce using rule 10 (bloque -> LEFT_CURVBR bloqueA .)
    SEMICOLON       reduce using rule 10 (bloque -> LEFT_CURVBR bloqueA .)


state 15

    (11) bloque -> LEFT_CURVBR RIGHT_CURVBR . empty
    (47) empty -> .

    $end            reduce using rule 47 (empty -> .)
    ELSE            reduce using rule 47 (empty -> .)
    SEMICOLON       reduce using rule 47 (empty -> .)

    empty                          shift and go to state 26

state 16

    (12) bloqueA -> estatuto . RIGHT_CURVBR empty
    (13) bloqueA -> estatuto . bloqueA
    (12) bloqueA -> . estatuto RIGHT_CURVBR empty
    (13) bloqueA -> . estatuto bloqueA
    (14) estatuto -> . asignacion empty
    (15) estatuto -> . condicion empty
    (16) estatuto -> . escritura empty
    (17) asignacion -> . ID EQUAL expresion SEMICOLON empty
    (18) condicion -> . IF LEFT_PAR expresion RIGHT_PAR bloque condicionA
    (21) escritura -> . PRINT LEFT_PAR escrituraA

    RIGHT_CURVBR    shift and go to state 27
    ID              shift and go to state 20
    IF              shift and go to state 21
    PRINT           shift and go to state 22

    estatuto                       shift and go to state 16
    bloqueA                        shift and go to state 28
    asignacion                     shift and go to state 17
    condicion                      shift and go to state 18
    escritura                      shift and go to state 19

state 17

    (14) estatuto -> asignacion . empty
    (47) empty -> .

    RIGHT_CURVBR    reduce using rule 47 (empty -> .)
    ID              reduce using rule 47 (empty -> .)
    IF              reduce using rule 47 (empty -> .)
    PRINT           reduce using rule 47 (empty -> .)

    empty                          shift and go to state 29

state 18

    (15) estatuto -> condicion . empty
    (47) empty -> .

    RIGHT_CURVBR    reduce using rule 47 (empty -> .)
    ID              reduce using rule 47 (empty -> .)
    IF              reduce using rule 47 (empty -> .)
    PRINT           reduce using rule 47 (empty -> .)

    empty                          shift and go to state 30

state 19

    (16) estatuto -> escritura . empty
    (47) empty -> .

    RIGHT_CURVBR    reduce using rule 47 (empty -> .)
    ID              reduce using rule 47 (empty -> .)
    IF              reduce using rule 47 (empty -> .)
    PRINT           reduce using rule 47 (empty -> .)

    empty                          shift and go to state 31

state 20

    (17) asignacion -> ID . EQUAL expresion SEMICOLON empty

    EQUAL           shift and go to state 32


state 21

    (18) condicion -> IF . LEFT_PAR expresion RIGHT_PAR bloque condicionA

    LEFT_PAR        shift and go to state 33


state 22

    (21) escritura -> PRINT . LEFT_PAR escrituraA

    LEFT_PAR        shift and go to state 34


state 23

    (2) programA -> vars bloque empty .

    $end            reduce using rule 2 (programA -> vars bloque empty .)


state 24

    (5) varsA -> ID COMMA . varsA
    (5) varsA -> . ID COMMA varsA
    (6) varsA -> . ID COLON tipo SEMICOLON empty
    (7) varsA -> . ID COLON tipo SEMICOLON varsA empty

    ID              shift and go to state 13

    varsA                          shift and go to state 35

state 25

    (6) varsA -> ID COLON . tipo SEMICOLON empty
    (7) varsA -> ID COLON . tipo SEMICOLON varsA empty
    (8) tipo -> . INT empty
    (9) tipo -> . FLOAT empty

    INT             shift and go to state 37
    FLOAT           shift and go to state 38

    tipo                           shift and go to state 36

state 26

    (11) bloque -> LEFT_CURVBR RIGHT_CURVBR empty .

    $end            reduce using rule 11 (bloque -> LEFT_CURVBR RIGHT_CURVBR empty .)
    ELSE            reduce using rule 11 (bloque -> LEFT_CURVBR RIGHT_CURVBR empty .)
    SEMICOLON       reduce using rule 11 (bloque -> LEFT_CURVBR RIGHT_CURVBR empty .)


state 27

    (12) bloqueA -> estatuto RIGHT_CURVBR . empty
    (47) empty -> .

    $end            reduce using rule 47 (empty -> .)
    ELSE            reduce using rule 47 (empty -> .)
    SEMICOLON       reduce using rule 47 (empty -> .)

    empty                          shift and go to state 39

state 28

    (13) bloqueA -> estatuto bloqueA .

    $end            reduce using rule 13 (bloqueA -> estatuto bloqueA .)
    ELSE            reduce using rule 13 (bloqueA -> estatuto bloqueA .)
    SEMICOLON       reduce using rule 13 (bloqueA -> estatuto bloqueA .)


state 29

    (14) estatuto -> asignacion empty .

    RIGHT_CURVBR    reduce using rule 14 (estatuto -> asignacion empty .)
    ID              reduce using rule 14 (estatuto -> asignacion empty .)
    IF              reduce using rule 14 (estatuto -> asignacion empty .)
    PRINT           reduce using rule 14 (estatuto -> asignacion empty .)


state 30

    (15) estatuto -> condicion empty .

    RIGHT_CURVBR    reduce using rule 15 (estatuto -> condicion empty .)
    ID              reduce using rule 15 (estatuto -> condicion empty .)
    IF              reduce using rule 15 (estatuto -> condicion empty .)
    PRINT           reduce using rule 15 (estatuto -> condicion empty .)


state 31

    (16) estatuto -> escritura empty .

    RIGHT_CURVBR    reduce using rule 16 (estatuto -> escritura empty .)
    ID              reduce using rule 16 (estatuto -> escritura empty .)
    IF              reduce using rule 16 (estatuto -> escritura empty .)
    PRINT           reduce using rule 16 (estatuto -> escritura empty .)


state 32

    (17) asignacion -> ID EQUAL . expresion SEMICOLON empty
    (26) expresion -> . exp expresionA
    (31) exp -> . termino expA
    (35) termino -> . factor terminoA
    (39) factor -> . LEFT_PAR expresion RIGHT_PAR empty
    (40) factor -> . factorA
    (41) factorA -> . PLUS varcte empty
    (42) factorA -> . MINUS varcte empty
    (43) factorA -> . varcte empty
    (44) varcte -> . ID empty
    (45) varcte -> . INT empty
    (46) varcte -> . FLOAT empty

    LEFT_PAR        shift and go to state 45
    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    ID              shift and go to state 40
    INT             shift and go to state 50
    FLOAT           shift and go to state 51

    expresion                      shift and go to state 41
    exp                            shift and go to state 42
    termino                        shift and go to state 43
    factor                         shift and go to state 44
    factorA                        shift and go to state 46
    varcte                         shift and go to state 48

state 33

    (18) condicion -> IF LEFT_PAR . expresion RIGHT_PAR bloque condicionA
    (26) expresion -> . exp expresionA
    (31) exp -> . termino expA
    (35) termino -> . factor terminoA
    (39) factor -> . LEFT_PAR expresion RIGHT_PAR empty
    (40) factor -> . factorA
    (41) factorA -> . PLUS varcte empty
    (42) factorA -> . MINUS varcte empty
    (43) factorA -> . varcte empty
    (44) varcte -> . ID empty
    (45) varcte -> . INT empty
    (46) varcte -> . FLOAT empty

    LEFT_PAR        shift and go to state 45
    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    ID              shift and go to state 40
    INT             shift and go to state 50
    FLOAT           shift and go to state 51

    expresion                      shift and go to state 52
    exp                            shift and go to state 42
    termino                        shift and go to state 43
    factor                         shift and go to state 44
    factorA                        shift and go to state 46
    varcte                         shift and go to state 48

state 34

    (21) escritura -> PRINT LEFT_PAR . escrituraA
    (22) escrituraA -> . expresion escrituraB
    (23) escrituraA -> . STRING escrituraB
    (26) expresion -> . exp expresionA
    (31) exp -> . termino expA
    (35) termino -> . factor terminoA
    (39) factor -> . LEFT_PAR expresion RIGHT_PAR empty
    (40) factor -> . factorA
    (41) factorA -> . PLUS varcte empty
    (42) factorA -> . MINUS varcte empty
    (43) factorA -> . varcte empty
    (44) varcte -> . ID empty
    (45) varcte -> . INT empty
    (46) varcte -> . FLOAT empty

    STRING          shift and go to state 55
    LEFT_PAR        shift and go to state 45
    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    ID              shift and go to state 40
    INT             shift and go to state 50
    FLOAT           shift and go to state 51

    escrituraA                     shift and go to state 53
    expresion                      shift and go to state 54
    exp                            shift and go to state 42
    termino                        shift and go to state 43
    factor                         shift and go to state 44
    factorA                        shift and go to state 46
    varcte                         shift and go to state 48

state 35

    (5) varsA -> ID COMMA varsA .

    LEFT_CURVBR     reduce using rule 5 (varsA -> ID COMMA varsA .)


state 36

    (6) varsA -> ID COLON tipo . SEMICOLON empty
    (7) varsA -> ID COLON tipo . SEMICOLON varsA empty

    SEMICOLON       shift and go to state 56


state 37

    (8) tipo -> INT . empty
    (47) empty -> .

    SEMICOLON       reduce using rule 47 (empty -> .)

    empty                          shift and go to state 57

state 38

    (9) tipo -> FLOAT . empty
    (47) empty -> .

    SEMICOLON       reduce using rule 47 (empty -> .)

    empty                          shift and go to state 58

state 39

    (12) bloqueA -> estatuto RIGHT_CURVBR empty .

    $end            reduce using rule 12 (bloqueA -> estatuto RIGHT_CURVBR empty .)
    ELSE            reduce using rule 12 (bloqueA -> estatuto RIGHT_CURVBR empty .)
    SEMICOLON       reduce using rule 12 (bloqueA -> estatuto RIGHT_CURVBR empty .)


state 40

    (44) varcte -> ID . empty
    (47) empty -> .

    MULTIPLY        reduce using rule 47 (empty -> .)
    DIVIDE          reduce using rule 47 (empty -> .)
    PLUS            reduce using rule 47 (empty -> .)
    MINUS           reduce using rule 47 (empty -> .)
    LESS            reduce using rule 47 (empty -> .)
    GREATER         reduce using rule 47 (empty -> .)
    DIFFERENT       reduce using rule 47 (empty -> .)
    SEMICOLON       reduce using rule 47 (empty -> .)
    RIGHT_PAR       reduce using rule 47 (empty -> .)
    COMMA           reduce using rule 47 (empty -> .)

    empty                          shift and go to state 59

state 41

    (17) asignacion -> ID EQUAL expresion . SEMICOLON empty

    SEMICOLON       shift and go to state 60


state 42

    (26) expresion -> exp . expresionA
    (27) expresionA -> . LESS exp empty
    (28) expresionA -> . GREATER exp empty
    (29) expresionA -> . DIFFERENT exp empty
    (30) expresionA -> . empty
    (47) empty -> .

    LESS            shift and go to state 62
    GREATER         shift and go to state 64
    DIFFERENT       shift and go to state 65
    SEMICOLON       reduce using rule 47 (empty -> .)
    RIGHT_PAR       reduce using rule 47 (empty -> .)
    COMMA           reduce using rule 47 (empty -> .)

    expresionA                     shift and go to state 61
    empty                          shift and go to state 63

state 43

    (31) exp -> termino . expA
    (32) expA -> . PLUS exp
    (33) expA -> . MINUS exp
    (34) expA -> . empty
    (47) empty -> .

    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    LESS            reduce using rule 47 (empty -> .)
    GREATER         reduce using rule 47 (empty -> .)
    DIFFERENT       reduce using rule 47 (empty -> .)
    SEMICOLON       reduce using rule 47 (empty -> .)
    RIGHT_PAR       reduce using rule 47 (empty -> .)
    COMMA           reduce using rule 47 (empty -> .)

    expA                           shift and go to state 66
    empty                          shift and go to state 69

state 44

    (35) termino -> factor . terminoA
    (36) terminoA -> . MULTIPLY termino
    (37) terminoA -> . DIVIDE termino
    (38) terminoA -> . empty
    (47) empty -> .

    MULTIPLY        shift and go to state 71
    DIVIDE          shift and go to state 72
    PLUS            reduce using rule 47 (empty -> .)
    MINUS           reduce using rule 47 (empty -> .)
    LESS            reduce using rule 47 (empty -> .)
    GREATER         reduce using rule 47 (empty -> .)
    DIFFERENT       reduce using rule 47 (empty -> .)
    SEMICOLON       reduce using rule 47 (empty -> .)
    RIGHT_PAR       reduce using rule 47 (empty -> .)
    COMMA           reduce using rule 47 (empty -> .)

    terminoA                       shift and go to state 70
    empty                          shift and go to state 73

state 45

    (39) factor -> LEFT_PAR . expresion RIGHT_PAR empty
    (26) expresion -> . exp expresionA
    (31) exp -> . termino expA
    (35) termino -> . factor terminoA
    (39) factor -> . LEFT_PAR expresion RIGHT_PAR empty
    (40) factor -> . factorA
    (41) factorA -> . PLUS varcte empty
    (42) factorA -> . MINUS varcte empty
    (43) factorA -> . varcte empty
    (44) varcte -> . ID empty
    (45) varcte -> . INT empty
    (46) varcte -> . FLOAT empty

    LEFT_PAR        shift and go to state 45
    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    ID              shift and go to state 40
    INT             shift and go to state 50
    FLOAT           shift and go to state 51

    expresion                      shift and go to state 74
    exp                            shift and go to state 42
    termino                        shift and go to state 43
    factor                         shift and go to state 44
    factorA                        shift and go to state 46
    varcte                         shift and go to state 48

state 46

    (40) factor -> factorA .

    MULTIPLY        reduce using rule 40 (factor -> factorA .)
    DIVIDE          reduce using rule 40 (factor -> factorA .)
    PLUS            reduce using rule 40 (factor -> factorA .)
    MINUS           reduce using rule 40 (factor -> factorA .)
    LESS            reduce using rule 40 (factor -> factorA .)
    GREATER         reduce using rule 40 (factor -> factorA .)
    DIFFERENT       reduce using rule 40 (factor -> factorA .)
    SEMICOLON       reduce using rule 40 (factor -> factorA .)
    RIGHT_PAR       reduce using rule 40 (factor -> factorA .)
    COMMA           reduce using rule 40 (factor -> factorA .)


state 47

    (41) factorA -> PLUS . varcte empty
    (44) varcte -> . ID empty
    (45) varcte -> . INT empty
    (46) varcte -> . FLOAT empty

    ID              shift and go to state 40
    INT             shift and go to state 50
    FLOAT           shift and go to state 51

    varcte                         shift and go to state 75

state 48

    (43) factorA -> varcte . empty
    (47) empty -> .

    MULTIPLY        reduce using rule 47 (empty -> .)
    DIVIDE          reduce using rule 47 (empty -> .)
    PLUS            reduce using rule 47 (empty -> .)
    MINUS           reduce using rule 47 (empty -> .)
    LESS            reduce using rule 47 (empty -> .)
    GREATER         reduce using rule 47 (empty -> .)
    DIFFERENT       reduce using rule 47 (empty -> .)
    SEMICOLON       reduce using rule 47 (empty -> .)
    RIGHT_PAR       reduce using rule 47 (empty -> .)
    COMMA           reduce using rule 47 (empty -> .)

    empty                          shift and go to state 76

state 49

    (42) factorA -> MINUS . varcte empty
    (44) varcte -> . ID empty
    (45) varcte -> . INT empty
    (46) varcte -> . FLOAT empty

    ID              shift and go to state 40
    INT             shift and go to state 50
    FLOAT           shift and go to state 51

    varcte                         shift and go to state 77

state 50

    (45) varcte -> INT . empty
    (47) empty -> .

    MULTIPLY        reduce using rule 47 (empty -> .)
    DIVIDE          reduce using rule 47 (empty -> .)
    PLUS            reduce using rule 47 (empty -> .)
    MINUS           reduce using rule 47 (empty -> .)
    LESS            reduce using rule 47 (empty -> .)
    GREATER         reduce using rule 47 (empty -> .)
    DIFFERENT       reduce using rule 47 (empty -> .)
    SEMICOLON       reduce using rule 47 (empty -> .)
    RIGHT_PAR       reduce using rule 47 (empty -> .)
    COMMA           reduce using rule 47 (empty -> .)

    empty                          shift and go to state 78

state 51

    (46) varcte -> FLOAT . empty
    (47) empty -> .

    MULTIPLY        reduce using rule 47 (empty -> .)
    DIVIDE          reduce using rule 47 (empty -> .)
    PLUS            reduce using rule 47 (empty -> .)
    MINUS           reduce using rule 47 (empty -> .)
    LESS            reduce using rule 47 (empty -> .)
    GREATER         reduce using rule 47 (empty -> .)
    DIFFERENT       reduce using rule 47 (empty -> .)
    SEMICOLON       reduce using rule 47 (empty -> .)
    RIGHT_PAR       reduce using rule 47 (empty -> .)
    COMMA           reduce using rule 47 (empty -> .)

    empty                          shift and go to state 79

state 52

    (18) condicion -> IF LEFT_PAR expresion . RIGHT_PAR bloque condicionA

    RIGHT_PAR       shift and go to state 80


state 53

    (21) escritura -> PRINT LEFT_PAR escrituraA .

    RIGHT_CURVBR    reduce using rule 21 (escritura -> PRINT LEFT_PAR escrituraA .)
    ID              reduce using rule 21 (escritura -> PRINT LEFT_PAR escrituraA .)
    IF              reduce using rule 21 (escritura -> PRINT LEFT_PAR escrituraA .)
    PRINT           reduce using rule 21 (escritura -> PRINT LEFT_PAR escrituraA .)


state 54

    (22) escrituraA -> expresion . escrituraB
    (24) escrituraB -> . COMMA escrituraA
    (25) escrituraB -> . RIGHT_PAR SEMICOLON empty

    COMMA           shift and go to state 82
    RIGHT_PAR       shift and go to state 83

    escrituraB                     shift and go to state 81

state 55

    (23) escrituraA -> STRING . escrituraB
    (24) escrituraB -> . COMMA escrituraA
    (25) escrituraB -> . RIGHT_PAR SEMICOLON empty

    COMMA           shift and go to state 82
    RIGHT_PAR       shift and go to state 83

    escrituraB                     shift and go to state 84

state 56

    (6) varsA -> ID COLON tipo SEMICOLON . empty
    (7) varsA -> ID COLON tipo SEMICOLON . varsA empty
    (47) empty -> .
    (5) varsA -> . ID COMMA varsA
    (6) varsA -> . ID COLON tipo SEMICOLON empty
    (7) varsA -> . ID COLON tipo SEMICOLON varsA empty

    LEFT_CURVBR     reduce using rule 47 (empty -> .)
    ID              shift and go to state 13

    empty                          shift and go to state 85
    varsA                          shift and go to state 86

state 57

    (8) tipo -> INT empty .

    SEMICOLON       reduce using rule 8 (tipo -> INT empty .)


state 58

    (9) tipo -> FLOAT empty .

    SEMICOLON       reduce using rule 9 (tipo -> FLOAT empty .)


state 59

    (44) varcte -> ID empty .

    MULTIPLY        reduce using rule 44 (varcte -> ID empty .)
    DIVIDE          reduce using rule 44 (varcte -> ID empty .)
    PLUS            reduce using rule 44 (varcte -> ID empty .)
    MINUS           reduce using rule 44 (varcte -> ID empty .)
    LESS            reduce using rule 44 (varcte -> ID empty .)
    GREATER         reduce using rule 44 (varcte -> ID empty .)
    DIFFERENT       reduce using rule 44 (varcte -> ID empty .)
    SEMICOLON       reduce using rule 44 (varcte -> ID empty .)
    RIGHT_PAR       reduce using rule 44 (varcte -> ID empty .)
    COMMA           reduce using rule 44 (varcte -> ID empty .)


state 60

    (17) asignacion -> ID EQUAL expresion SEMICOLON . empty
    (47) empty -> .

    RIGHT_CURVBR    reduce using rule 47 (empty -> .)
    ID              reduce using rule 47 (empty -> .)
    IF              reduce using rule 47 (empty -> .)
    PRINT           reduce using rule 47 (empty -> .)

    empty                          shift and go to state 87

state 61

    (26) expresion -> exp expresionA .

    SEMICOLON       reduce using rule 26 (expresion -> exp expresionA .)
    RIGHT_PAR       reduce using rule 26 (expresion -> exp expresionA .)
    COMMA           reduce using rule 26 (expresion -> exp expresionA .)


state 62

    (27) expresionA -> LESS . exp empty
    (31) exp -> . termino expA
    (35) termino -> . factor terminoA
    (39) factor -> . LEFT_PAR expresion RIGHT_PAR empty
    (40) factor -> . factorA
    (41) factorA -> . PLUS varcte empty
    (42) factorA -> . MINUS varcte empty
    (43) factorA -> . varcte empty
    (44) varcte -> . ID empty
    (45) varcte -> . INT empty
    (46) varcte -> . FLOAT empty

    LEFT_PAR        shift and go to state 45
    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    ID              shift and go to state 40
    INT             shift and go to state 50
    FLOAT           shift and go to state 51

    exp                            shift and go to state 88
    termino                        shift and go to state 43
    factor                         shift and go to state 44
    factorA                        shift and go to state 46
    varcte                         shift and go to state 48

state 63

    (30) expresionA -> empty .

    SEMICOLON       reduce using rule 30 (expresionA -> empty .)
    RIGHT_PAR       reduce using rule 30 (expresionA -> empty .)
    COMMA           reduce using rule 30 (expresionA -> empty .)


state 64

    (28) expresionA -> GREATER . exp empty
    (31) exp -> . termino expA
    (35) termino -> . factor terminoA
    (39) factor -> . LEFT_PAR expresion RIGHT_PAR empty
    (40) factor -> . factorA
    (41) factorA -> . PLUS varcte empty
    (42) factorA -> . MINUS varcte empty
    (43) factorA -> . varcte empty
    (44) varcte -> . ID empty
    (45) varcte -> . INT empty
    (46) varcte -> . FLOAT empty

    LEFT_PAR        shift and go to state 45
    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    ID              shift and go to state 40
    INT             shift and go to state 50
    FLOAT           shift and go to state 51

    exp                            shift and go to state 89
    termino                        shift and go to state 43
    factor                         shift and go to state 44
    factorA                        shift and go to state 46
    varcte                         shift and go to state 48

state 65

    (29) expresionA -> DIFFERENT . exp empty
    (31) exp -> . termino expA
    (35) termino -> . factor terminoA
    (39) factor -> . LEFT_PAR expresion RIGHT_PAR empty
    (40) factor -> . factorA
    (41) factorA -> . PLUS varcte empty
    (42) factorA -> . MINUS varcte empty
    (43) factorA -> . varcte empty
    (44) varcte -> . ID empty
    (45) varcte -> . INT empty
    (46) varcte -> . FLOAT empty

    LEFT_PAR        shift and go to state 45
    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    ID              shift and go to state 40
    INT             shift and go to state 50
    FLOAT           shift and go to state 51

    exp                            shift and go to state 90
    termino                        shift and go to state 43
    factor                         shift and go to state 44
    factorA                        shift and go to state 46
    varcte                         shift and go to state 48

state 66

    (31) exp -> termino expA .

    LESS            reduce using rule 31 (exp -> termino expA .)
    GREATER         reduce using rule 31 (exp -> termino expA .)
    DIFFERENT       reduce using rule 31 (exp -> termino expA .)
    SEMICOLON       reduce using rule 31 (exp -> termino expA .)
    RIGHT_PAR       reduce using rule 31 (exp -> termino expA .)
    COMMA           reduce using rule 31 (exp -> termino expA .)


state 67

    (32) expA -> PLUS . exp
    (31) exp -> . termino expA
    (35) termino -> . factor terminoA
    (39) factor -> . LEFT_PAR expresion RIGHT_PAR empty
    (40) factor -> . factorA
    (41) factorA -> . PLUS varcte empty
    (42) factorA -> . MINUS varcte empty
    (43) factorA -> . varcte empty
    (44) varcte -> . ID empty
    (45) varcte -> . INT empty
    (46) varcte -> . FLOAT empty

    LEFT_PAR        shift and go to state 45
    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    ID              shift and go to state 40
    INT             shift and go to state 50
    FLOAT           shift and go to state 51

    exp                            shift and go to state 91
    termino                        shift and go to state 43
    factor                         shift and go to state 44
    factorA                        shift and go to state 46
    varcte                         shift and go to state 48

state 68

    (33) expA -> MINUS . exp
    (31) exp -> . termino expA
    (35) termino -> . factor terminoA
    (39) factor -> . LEFT_PAR expresion RIGHT_PAR empty
    (40) factor -> . factorA
    (41) factorA -> . PLUS varcte empty
    (42) factorA -> . MINUS varcte empty
    (43) factorA -> . varcte empty
    (44) varcte -> . ID empty
    (45) varcte -> . INT empty
    (46) varcte -> . FLOAT empty

    LEFT_PAR        shift and go to state 45
    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    ID              shift and go to state 40
    INT             shift and go to state 50
    FLOAT           shift and go to state 51

    exp                            shift and go to state 92
    termino                        shift and go to state 43
    factor                         shift and go to state 44
    factorA                        shift and go to state 46
    varcte                         shift and go to state 48

state 69

    (34) expA -> empty .

    LESS            reduce using rule 34 (expA -> empty .)
    GREATER         reduce using rule 34 (expA -> empty .)
    DIFFERENT       reduce using rule 34 (expA -> empty .)
    SEMICOLON       reduce using rule 34 (expA -> empty .)
    RIGHT_PAR       reduce using rule 34 (expA -> empty .)
    COMMA           reduce using rule 34 (expA -> empty .)


state 70

    (35) termino -> factor terminoA .

    PLUS            reduce using rule 35 (termino -> factor terminoA .)
    MINUS           reduce using rule 35 (termino -> factor terminoA .)
    LESS            reduce using rule 35 (termino -> factor terminoA .)
    GREATER         reduce using rule 35 (termino -> factor terminoA .)
    DIFFERENT       reduce using rule 35 (termino -> factor terminoA .)
    SEMICOLON       reduce using rule 35 (termino -> factor terminoA .)
    RIGHT_PAR       reduce using rule 35 (termino -> factor terminoA .)
    COMMA           reduce using rule 35 (termino -> factor terminoA .)


state 71

    (36) terminoA -> MULTIPLY . termino
    (35) termino -> . factor terminoA
    (39) factor -> . LEFT_PAR expresion RIGHT_PAR empty
    (40) factor -> . factorA
    (41) factorA -> . PLUS varcte empty
    (42) factorA -> . MINUS varcte empty
    (43) factorA -> . varcte empty
    (44) varcte -> . ID empty
    (45) varcte -> . INT empty
    (46) varcte -> . FLOAT empty

    LEFT_PAR        shift and go to state 45
    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    ID              shift and go to state 40
    INT             shift and go to state 50
    FLOAT           shift and go to state 51

    termino                        shift and go to state 93
    factor                         shift and go to state 44
    factorA                        shift and go to state 46
    varcte                         shift and go to state 48

state 72

    (37) terminoA -> DIVIDE . termino
    (35) termino -> . factor terminoA
    (39) factor -> . LEFT_PAR expresion RIGHT_PAR empty
    (40) factor -> . factorA
    (41) factorA -> . PLUS varcte empty
    (42) factorA -> . MINUS varcte empty
    (43) factorA -> . varcte empty
    (44) varcte -> . ID empty
    (45) varcte -> . INT empty
    (46) varcte -> . FLOAT empty

    LEFT_PAR        shift and go to state 45
    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    ID              shift and go to state 40
    INT             shift and go to state 50
    FLOAT           shift and go to state 51

    termino                        shift and go to state 94
    factor                         shift and go to state 44
    factorA                        shift and go to state 46
    varcte                         shift and go to state 48

state 73

    (38) terminoA -> empty .

    PLUS            reduce using rule 38 (terminoA -> empty .)
    MINUS           reduce using rule 38 (terminoA -> empty .)
    LESS            reduce using rule 38 (terminoA -> empty .)
    GREATER         reduce using rule 38 (terminoA -> empty .)
    DIFFERENT       reduce using rule 38 (terminoA -> empty .)
    SEMICOLON       reduce using rule 38 (terminoA -> empty .)
    RIGHT_PAR       reduce using rule 38 (terminoA -> empty .)
    COMMA           reduce using rule 38 (terminoA -> empty .)


state 74

    (39) factor -> LEFT_PAR expresion . RIGHT_PAR empty

    RIGHT_PAR       shift and go to state 95


state 75

    (41) factorA -> PLUS varcte . empty
    (47) empty -> .

    MULTIPLY        reduce using rule 47 (empty -> .)
    DIVIDE          reduce using rule 47 (empty -> .)
    PLUS            reduce using rule 47 (empty -> .)
    MINUS           reduce using rule 47 (empty -> .)
    LESS            reduce using rule 47 (empty -> .)
    GREATER         reduce using rule 47 (empty -> .)
    DIFFERENT       reduce using rule 47 (empty -> .)
    SEMICOLON       reduce using rule 47 (empty -> .)
    RIGHT_PAR       reduce using rule 47 (empty -> .)
    COMMA           reduce using rule 47 (empty -> .)

    empty                          shift and go to state 96

state 76

    (43) factorA -> varcte empty .

    MULTIPLY        reduce using rule 43 (factorA -> varcte empty .)
    DIVIDE          reduce using rule 43 (factorA -> varcte empty .)
    PLUS            reduce using rule 43 (factorA -> varcte empty .)
    MINUS           reduce using rule 43 (factorA -> varcte empty .)
    LESS            reduce using rule 43 (factorA -> varcte empty .)
    GREATER         reduce using rule 43 (factorA -> varcte empty .)
    DIFFERENT       reduce using rule 43 (factorA -> varcte empty .)
    SEMICOLON       reduce using rule 43 (factorA -> varcte empty .)
    RIGHT_PAR       reduce using rule 43 (factorA -> varcte empty .)
    COMMA           reduce using rule 43 (factorA -> varcte empty .)


state 77

    (42) factorA -> MINUS varcte . empty
    (47) empty -> .

    MULTIPLY        reduce using rule 47 (empty -> .)
    DIVIDE          reduce using rule 47 (empty -> .)
    PLUS            reduce using rule 47 (empty -> .)
    MINUS           reduce using rule 47 (empty -> .)
    LESS            reduce using rule 47 (empty -> .)
    GREATER         reduce using rule 47 (empty -> .)
    DIFFERENT       reduce using rule 47 (empty -> .)
    SEMICOLON       reduce using rule 47 (empty -> .)
    RIGHT_PAR       reduce using rule 47 (empty -> .)
    COMMA           reduce using rule 47 (empty -> .)

    empty                          shift and go to state 97

state 78

    (45) varcte -> INT empty .

    MULTIPLY        reduce using rule 45 (varcte -> INT empty .)
    DIVIDE          reduce using rule 45 (varcte -> INT empty .)
    PLUS            reduce using rule 45 (varcte -> INT empty .)
    MINUS           reduce using rule 45 (varcte -> INT empty .)
    LESS            reduce using rule 45 (varcte -> INT empty .)
    GREATER         reduce using rule 45 (varcte -> INT empty .)
    DIFFERENT       reduce using rule 45 (varcte -> INT empty .)
    SEMICOLON       reduce using rule 45 (varcte -> INT empty .)
    RIGHT_PAR       reduce using rule 45 (varcte -> INT empty .)
    COMMA           reduce using rule 45 (varcte -> INT empty .)


state 79

    (46) varcte -> FLOAT empty .

    MULTIPLY        reduce using rule 46 (varcte -> FLOAT empty .)
    DIVIDE          reduce using rule 46 (varcte -> FLOAT empty .)
    PLUS            reduce using rule 46 (varcte -> FLOAT empty .)
    MINUS           reduce using rule 46 (varcte -> FLOAT empty .)
    LESS            reduce using rule 46 (varcte -> FLOAT empty .)
    GREATER         reduce using rule 46 (varcte -> FLOAT empty .)
    DIFFERENT       reduce using rule 46 (varcte -> FLOAT empty .)
    SEMICOLON       reduce using rule 46 (varcte -> FLOAT empty .)
    RIGHT_PAR       reduce using rule 46 (varcte -> FLOAT empty .)
    COMMA           reduce using rule 46 (varcte -> FLOAT empty .)


state 80

    (18) condicion -> IF LEFT_PAR expresion RIGHT_PAR . bloque condicionA
    (10) bloque -> . LEFT_CURVBR bloqueA
    (11) bloque -> . LEFT_CURVBR RIGHT_CURVBR empty

    LEFT_CURVBR     shift and go to state 9

    bloque                         shift and go to state 98

state 81

    (22) escrituraA -> expresion escrituraB .

    RIGHT_CURVBR    reduce using rule 22 (escrituraA -> expresion escrituraB .)
    ID              reduce using rule 22 (escrituraA -> expresion escrituraB .)
    IF              reduce using rule 22 (escrituraA -> expresion escrituraB .)
    PRINT           reduce using rule 22 (escrituraA -> expresion escrituraB .)


state 82

    (24) escrituraB -> COMMA . escrituraA
    (22) escrituraA -> . expresion escrituraB
    (23) escrituraA -> . STRING escrituraB
    (26) expresion -> . exp expresionA
    (31) exp -> . termino expA
    (35) termino -> . factor terminoA
    (39) factor -> . LEFT_PAR expresion RIGHT_PAR empty
    (40) factor -> . factorA
    (41) factorA -> . PLUS varcte empty
    (42) factorA -> . MINUS varcte empty
    (43) factorA -> . varcte empty
    (44) varcte -> . ID empty
    (45) varcte -> . INT empty
    (46) varcte -> . FLOAT empty

    STRING          shift and go to state 55
    LEFT_PAR        shift and go to state 45
    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    ID              shift and go to state 40
    INT             shift and go to state 50
    FLOAT           shift and go to state 51

    escrituraA                     shift and go to state 99
    expresion                      shift and go to state 54
    exp                            shift and go to state 42
    termino                        shift and go to state 43
    factor                         shift and go to state 44
    factorA                        shift and go to state 46
    varcte                         shift and go to state 48

state 83

    (25) escrituraB -> RIGHT_PAR . SEMICOLON empty

    SEMICOLON       shift and go to state 100


state 84

    (23) escrituraA -> STRING escrituraB .

    RIGHT_CURVBR    reduce using rule 23 (escrituraA -> STRING escrituraB .)
    ID              reduce using rule 23 (escrituraA -> STRING escrituraB .)
    IF              reduce using rule 23 (escrituraA -> STRING escrituraB .)
    PRINT           reduce using rule 23 (escrituraA -> STRING escrituraB .)


state 85

    (6) varsA -> ID COLON tipo SEMICOLON empty .

    LEFT_CURVBR     reduce using rule 6 (varsA -> ID COLON tipo SEMICOLON empty .)


state 86

    (7) varsA -> ID COLON tipo SEMICOLON varsA . empty
    (47) empty -> .

    LEFT_CURVBR     reduce using rule 47 (empty -> .)

    empty                          shift and go to state 101

state 87

    (17) asignacion -> ID EQUAL expresion SEMICOLON empty .

    RIGHT_CURVBR    reduce using rule 17 (asignacion -> ID EQUAL expresion SEMICOLON empty .)
    ID              reduce using rule 17 (asignacion -> ID EQUAL expresion SEMICOLON empty .)
    IF              reduce using rule 17 (asignacion -> ID EQUAL expresion SEMICOLON empty .)
    PRINT           reduce using rule 17 (asignacion -> ID EQUAL expresion SEMICOLON empty .)


state 88

    (27) expresionA -> LESS exp . empty
    (47) empty -> .

    SEMICOLON       reduce using rule 47 (empty -> .)
    RIGHT_PAR       reduce using rule 47 (empty -> .)
    COMMA           reduce using rule 47 (empty -> .)

    empty                          shift and go to state 102

state 89

    (28) expresionA -> GREATER exp . empty
    (47) empty -> .

    SEMICOLON       reduce using rule 47 (empty -> .)
    RIGHT_PAR       reduce using rule 47 (empty -> .)
    COMMA           reduce using rule 47 (empty -> .)

    empty                          shift and go to state 103

state 90

    (29) expresionA -> DIFFERENT exp . empty
    (47) empty -> .

    SEMICOLON       reduce using rule 47 (empty -> .)
    RIGHT_PAR       reduce using rule 47 (empty -> .)
    COMMA           reduce using rule 47 (empty -> .)

    empty                          shift and go to state 104

state 91

    (32) expA -> PLUS exp .

    LESS            reduce using rule 32 (expA -> PLUS exp .)
    GREATER         reduce using rule 32 (expA -> PLUS exp .)
    DIFFERENT       reduce using rule 32 (expA -> PLUS exp .)
    SEMICOLON       reduce using rule 32 (expA -> PLUS exp .)
    RIGHT_PAR       reduce using rule 32 (expA -> PLUS exp .)
    COMMA           reduce using rule 32 (expA -> PLUS exp .)


state 92

    (33) expA -> MINUS exp .

    LESS            reduce using rule 33 (expA -> MINUS exp .)
    GREATER         reduce using rule 33 (expA -> MINUS exp .)
    DIFFERENT       reduce using rule 33 (expA -> MINUS exp .)
    SEMICOLON       reduce using rule 33 (expA -> MINUS exp .)
    RIGHT_PAR       reduce using rule 33 (expA -> MINUS exp .)
    COMMA           reduce using rule 33 (expA -> MINUS exp .)


state 93

    (36) terminoA -> MULTIPLY termino .

    PLUS            reduce using rule 36 (terminoA -> MULTIPLY termino .)
    MINUS           reduce using rule 36 (terminoA -> MULTIPLY termino .)
    LESS            reduce using rule 36 (terminoA -> MULTIPLY termino .)
    GREATER         reduce using rule 36 (terminoA -> MULTIPLY termino .)
    DIFFERENT       reduce using rule 36 (terminoA -> MULTIPLY termino .)
    SEMICOLON       reduce using rule 36 (terminoA -> MULTIPLY termino .)
    RIGHT_PAR       reduce using rule 36 (terminoA -> MULTIPLY termino .)
    COMMA           reduce using rule 36 (terminoA -> MULTIPLY termino .)


state 94

    (37) terminoA -> DIVIDE termino .

    PLUS            reduce using rule 37 (terminoA -> DIVIDE termino .)
    MINUS           reduce using rule 37 (terminoA -> DIVIDE termino .)
    LESS            reduce using rule 37 (terminoA -> DIVIDE termino .)
    GREATER         reduce using rule 37 (terminoA -> DIVIDE termino .)
    DIFFERENT       reduce using rule 37 (terminoA -> DIVIDE termino .)
    SEMICOLON       reduce using rule 37 (terminoA -> DIVIDE termino .)
    RIGHT_PAR       reduce using rule 37 (terminoA -> DIVIDE termino .)
    COMMA           reduce using rule 37 (terminoA -> DIVIDE termino .)


state 95

    (39) factor -> LEFT_PAR expresion RIGHT_PAR . empty
    (47) empty -> .

    MULTIPLY        reduce using rule 47 (empty -> .)
    DIVIDE          reduce using rule 47 (empty -> .)
    PLUS            reduce using rule 47 (empty -> .)
    MINUS           reduce using rule 47 (empty -> .)
    LESS            reduce using rule 47 (empty -> .)
    GREATER         reduce using rule 47 (empty -> .)
    DIFFERENT       reduce using rule 47 (empty -> .)
    SEMICOLON       reduce using rule 47 (empty -> .)
    RIGHT_PAR       reduce using rule 47 (empty -> .)
    COMMA           reduce using rule 47 (empty -> .)

    empty                          shift and go to state 105

state 96

    (41) factorA -> PLUS varcte empty .

    MULTIPLY        reduce using rule 41 (factorA -> PLUS varcte empty .)
    DIVIDE          reduce using rule 41 (factorA -> PLUS varcte empty .)
    PLUS            reduce using rule 41 (factorA -> PLUS varcte empty .)
    MINUS           reduce using rule 41 (factorA -> PLUS varcte empty .)
    LESS            reduce using rule 41 (factorA -> PLUS varcte empty .)
    GREATER         reduce using rule 41 (factorA -> PLUS varcte empty .)
    DIFFERENT       reduce using rule 41 (factorA -> PLUS varcte empty .)
    SEMICOLON       reduce using rule 41 (factorA -> PLUS varcte empty .)
    RIGHT_PAR       reduce using rule 41 (factorA -> PLUS varcte empty .)
    COMMA           reduce using rule 41 (factorA -> PLUS varcte empty .)


state 97

    (42) factorA -> MINUS varcte empty .

    MULTIPLY        reduce using rule 42 (factorA -> MINUS varcte empty .)
    DIVIDE          reduce using rule 42 (factorA -> MINUS varcte empty .)
    PLUS            reduce using rule 42 (factorA -> MINUS varcte empty .)
    MINUS           reduce using rule 42 (factorA -> MINUS varcte empty .)
    LESS            reduce using rule 42 (factorA -> MINUS varcte empty .)
    GREATER         reduce using rule 42 (factorA -> MINUS varcte empty .)
    DIFFERENT       reduce using rule 42 (factorA -> MINUS varcte empty .)
    SEMICOLON       reduce using rule 42 (factorA -> MINUS varcte empty .)
    RIGHT_PAR       reduce using rule 42 (factorA -> MINUS varcte empty .)
    COMMA           reduce using rule 42 (factorA -> MINUS varcte empty .)


state 98

    (18) condicion -> IF LEFT_PAR expresion RIGHT_PAR bloque . condicionA
    (19) condicionA -> . ELSE bloque SEMICOLON empty
    (20) condicionA -> . SEMICOLON empty

    ELSE            shift and go to state 107
    SEMICOLON       shift and go to state 108

    condicionA                     shift and go to state 106

state 99

    (24) escrituraB -> COMMA escrituraA .

    RIGHT_CURVBR    reduce using rule 24 (escrituraB -> COMMA escrituraA .)
    ID              reduce using rule 24 (escrituraB -> COMMA escrituraA .)
    IF              reduce using rule 24 (escrituraB -> COMMA escrituraA .)
    PRINT           reduce using rule 24 (escrituraB -> COMMA escrituraA .)


state 100

    (25) escrituraB -> RIGHT_PAR SEMICOLON . empty
    (47) empty -> .

    RIGHT_CURVBR    reduce using rule 47 (empty -> .)
    ID              reduce using rule 47 (empty -> .)
    IF              reduce using rule 47 (empty -> .)
    PRINT           reduce using rule 47 (empty -> .)

    empty                          shift and go to state 109

state 101

    (7) varsA -> ID COLON tipo SEMICOLON varsA empty .

    LEFT_CURVBR     reduce using rule 7 (varsA -> ID COLON tipo SEMICOLON varsA empty .)


state 102

    (27) expresionA -> LESS exp empty .

    SEMICOLON       reduce using rule 27 (expresionA -> LESS exp empty .)
    RIGHT_PAR       reduce using rule 27 (expresionA -> LESS exp empty .)
    COMMA           reduce using rule 27 (expresionA -> LESS exp empty .)


state 103

    (28) expresionA -> GREATER exp empty .

    SEMICOLON       reduce using rule 28 (expresionA -> GREATER exp empty .)
    RIGHT_PAR       reduce using rule 28 (expresionA -> GREATER exp empty .)
    COMMA           reduce using rule 28 (expresionA -> GREATER exp empty .)


state 104

    (29) expresionA -> DIFFERENT exp empty .

    SEMICOLON       reduce using rule 29 (expresionA -> DIFFERENT exp empty .)
    RIGHT_PAR       reduce using rule 29 (expresionA -> DIFFERENT exp empty .)
    COMMA           reduce using rule 29 (expresionA -> DIFFERENT exp empty .)


state 105

    (39) factor -> LEFT_PAR expresion RIGHT_PAR empty .

    MULTIPLY        reduce using rule 39 (factor -> LEFT_PAR expresion RIGHT_PAR empty .)
    DIVIDE          reduce using rule 39 (factor -> LEFT_PAR expresion RIGHT_PAR empty .)
    PLUS            reduce using rule 39 (factor -> LEFT_PAR expresion RIGHT_PAR empty .)
    MINUS           reduce using rule 39 (factor -> LEFT_PAR expresion RIGHT_PAR empty .)
    LESS            reduce using rule 39 (factor -> LEFT_PAR expresion RIGHT_PAR empty .)
    GREATER         reduce using rule 39 (factor -> LEFT_PAR expresion RIGHT_PAR empty .)
    DIFFERENT       reduce using rule 39 (factor -> LEFT_PAR expresion RIGHT_PAR empty .)
    SEMICOLON       reduce using rule 39 (factor -> LEFT_PAR expresion RIGHT_PAR empty .)
    RIGHT_PAR       reduce using rule 39 (factor -> LEFT_PAR expresion RIGHT_PAR empty .)
    COMMA           reduce using rule 39 (factor -> LEFT_PAR expresion RIGHT_PAR empty .)


state 106

    (18) condicion -> IF LEFT_PAR expresion RIGHT_PAR bloque condicionA .

    RIGHT_CURVBR    reduce using rule 18 (condicion -> IF LEFT_PAR expresion RIGHT_PAR bloque condicionA .)
    ID              reduce using rule 18 (condicion -> IF LEFT_PAR expresion RIGHT_PAR bloque condicionA .)
    IF              reduce using rule 18 (condicion -> IF LEFT_PAR expresion RIGHT_PAR bloque condicionA .)
    PRINT           reduce using rule 18 (condicion -> IF LEFT_PAR expresion RIGHT_PAR bloque condicionA .)


state 107

    (19) condicionA -> ELSE . bloque SEMICOLON empty
    (10) bloque -> . LEFT_CURVBR bloqueA
    (11) bloque -> . LEFT_CURVBR RIGHT_CURVBR empty

    LEFT_CURVBR     shift and go to state 9

    bloque                         shift and go to state 110

state 108

    (20) condicionA -> SEMICOLON . empty
    (47) empty -> .

    RIGHT_CURVBR    reduce using rule 47 (empty -> .)
    ID              reduce using rule 47 (empty -> .)
    IF              reduce using rule 47 (empty -> .)
    PRINT           reduce using rule 47 (empty -> .)

    empty                          shift and go to state 111

state 109

    (25) escrituraB -> RIGHT_PAR SEMICOLON empty .

    RIGHT_CURVBR    reduce using rule 25 (escrituraB -> RIGHT_PAR SEMICOLON empty .)
    ID              reduce using rule 25 (escrituraB -> RIGHT_PAR SEMICOLON empty .)
    IF              reduce using rule 25 (escrituraB -> RIGHT_PAR SEMICOLON empty .)
    PRINT           reduce using rule 25 (escrituraB -> RIGHT_PAR SEMICOLON empty .)


state 110

    (19) condicionA -> ELSE bloque . SEMICOLON empty

    SEMICOLON       shift and go to state 112


state 111

    (20) condicionA -> SEMICOLON empty .

    RIGHT_CURVBR    reduce using rule 20 (condicionA -> SEMICOLON empty .)
    ID              reduce using rule 20 (condicionA -> SEMICOLON empty .)
    IF              reduce using rule 20 (condicionA -> SEMICOLON empty .)
    PRINT           reduce using rule 20 (condicionA -> SEMICOLON empty .)


state 112

    (19) condicionA -> ELSE bloque SEMICOLON . empty
    (47) empty -> .

    RIGHT_CURVBR    reduce using rule 47 (empty -> .)
    ID              reduce using rule 47 (empty -> .)
    IF              reduce using rule 47 (empty -> .)
    PRINT           reduce using rule 47 (empty -> .)

    empty                          shift and go to state 113

state 113

    (19) condicionA -> ELSE bloque SEMICOLON empty .

    RIGHT_CURVBR    reduce using rule 19 (condicionA -> ELSE bloque SEMICOLON empty .)
    ID              reduce using rule 19 (condicionA -> ELSE bloque SEMICOLON empty .)
    IF              reduce using rule 19 (condicionA -> ELSE bloque SEMICOLON empty .)
    PRINT           reduce using rule 19 (condicionA -> ELSE bloque SEMICOLON empty .)

