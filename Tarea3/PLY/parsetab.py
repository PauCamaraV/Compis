
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COLON COMMA DIFFERENT DIVIDE ELSE EQUAL FLOAT GREATER ID IF INT LEFT_CURVBR LEFT_PAR LESS MINUS MULTIPLY PLUS PRINT PROGRAM RIGHT_CURVBR RIGHT_PAR SEMICOLON STRING VAR\n    program  : PROGRAM ID SEMICOLON programA\n    \n    programA : vars programB\n             | programB\n    \n    programB : bloque empty\n    \n    vars  : VAR varsA\n    \n    varsA : ID COMMA varsA\n          | ID COLON tipo SEMICOLON varsB\n    \n    varsB : varsA\n          | empty\n    \n    tipo  : INT empty\n          | FLOAT empty\n    \n    bloque  : LEFT_CURVBR bloqueA\n    bloqueA : estatuto bloqueA\n            | RIGHT_CURVBR empty\n    \n    estatuto  : asignacion empty\n              | condicion empty\n              | escritura empty\n    \n    asignacion  : ID EQUAL expresion SEMICOLON empty\n    \n    escritura  : PRINT LEFT_PAR escrituraA\n    escrituraA : expresion escrituraB\n               | STRING escrituraB\n    escrituraB : COMMA  escrituraA\n               | RIGHT_PAR SEMICOLON empty\n    \n    expresion  : exp expresionA\n    expresionA : LESS exp empty\n               | GREATER exp empty\n               | DIFFERENT exp empty\n               | empty\n    \n    condicion  : IF LEFT_PAR expresion RIGHT_PAR bloque condicionA\n    condicionA : ELSE bloque empty\n               | empty\n    \n    exp  : termino expA\n    expA : PLUS exp\n         | MINUS exp\n         | empty\n    \n    termino  : factor terminoA\n    terminoA : MULTIPLY termino\n         | DIVIDE termino\n         | empty\n    \n    factor  : LEFT_PAR expresion RIGHT_PAR empty\n            | factorA\n    factorA : PLUS factorB\n            | MINUS factorB\n            | factorB\n    factorB : varcte empty\n    \n    varcte  : ID empty\n            | INT empty\n            | FLOAT empty\n    \n    empty : \n    '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,5,7,9,11,14,15,17,26,27,],[0,-1,-3,-49,-2,-4,-12,-49,-13,-14,]),'ID':([2,8,10,15,16,17,18,19,20,24,26,27,28,29,30,31,32,33,43,45,47,52,55,59,61,63,64,66,67,70,71,80,81,83,87,96,97,98,103,105,106,107,108,],[3,13,21,-12,21,-49,-49,-49,-49,13,-13,-14,-15,-16,-17,38,38,38,38,38,38,-19,13,-49,38,38,38,38,38,38,38,-20,38,-21,-18,-49,-22,-49,-29,-31,-23,-49,-30,]),'SEMICOLON':([3,35,36,37,38,39,40,41,42,44,46,48,49,50,56,57,58,60,62,65,68,69,72,74,75,76,77,78,82,88,89,90,91,92,93,94,95,99,100,101,102,],[4,55,-49,-49,-49,59,-49,-49,-49,-41,-44,-49,-49,-49,-10,-11,-46,-24,-28,-32,-35,-36,-39,-42,-43,-45,-47,-48,98,-49,-49,-49,-33,-34,-37,-38,-49,-25,-26,-27,-40,]),'VAR':([4,],[8,]),'LEFT_CURVBR':([4,6,12,34,55,79,84,85,86,104,],[10,10,-5,-6,-49,10,-7,-8,-9,10,]),'RIGHT_CURVBR':([10,15,16,17,18,19,20,26,27,28,29,30,52,59,80,83,87,96,97,98,103,105,106,107,108,],[17,-12,17,-49,-49,-49,-49,-13,-14,-15,-16,-17,-19,-49,-20,-21,-18,-49,-22,-49,-29,-31,-23,-49,-30,]),'IF':([10,15,16,17,18,19,20,26,27,28,29,30,52,59,80,83,87,96,97,98,103,105,106,107,108,],[22,-12,22,-49,-49,-49,-49,-13,-14,-15,-16,-17,-19,-49,-20,-21,-18,-49,-22,-49,-29,-31,-23,-49,-30,]),'PRINT':([10,15,16,17,18,19,20,26,27,28,29,30,52,59,80,83,87,96,97,98,103,105,106,107,108,],[23,-12,23,-49,-49,-49,-49,-13,-14,-15,-16,-17,-19,-49,-20,-21,-18,-49,-22,-49,-29,-31,-23,-49,-30,]),'COMMA':([13,38,40,41,42,44,46,48,49,50,53,54,58,60,62,65,68,69,72,74,75,76,77,78,88,89,90,91,92,93,94,95,99,100,101,102,],[24,-49,-49,-49,-49,-41,-44,-49,-49,-49,81,81,-46,-24,-28,-32,-35,-36,-39,-42,-43,-45,-47,-48,-49,-49,-49,-33,-34,-37,-38,-49,-25,-26,-27,-40,]),'COLON':([13,],[25,]),'ELSE':([15,17,26,27,96,],[-12,-49,-13,-14,104,]),'EQUAL':([21,],[31,]),'LEFT_PAR':([22,23,31,32,33,43,61,63,64,66,67,70,71,81,],[32,33,43,43,43,43,43,43,43,43,43,43,43,43,]),'INT':([25,31,32,33,43,45,47,61,63,64,66,67,70,71,81,],[36,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'FLOAT':([25,31,32,33,43,45,47,61,63,64,66,67,70,71,81,],[37,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'PLUS':([31,32,33,38,41,42,43,44,46,48,49,50,58,61,63,64,66,67,69,70,71,72,74,75,76,77,78,81,93,94,95,102,],[45,45,45,-49,66,-49,45,-41,-44,-49,-49,-49,-46,45,45,45,45,45,-36,45,45,-39,-42,-43,-45,-47,-48,45,-37,-38,-49,-40,]),'MINUS':([31,32,33,38,41,42,43,44,46,48,49,50,58,61,63,64,66,67,69,70,71,72,74,75,76,77,78,81,93,94,95,102,],[47,47,47,-49,67,-49,47,-41,-44,-49,-49,-49,-46,47,47,47,47,47,-36,47,47,-39,-42,-43,-45,-47,-48,47,-37,-38,-49,-40,]),'STRING':([33,81,],[54,54,]),'MULTIPLY':([38,42,44,46,48,49,50,58,74,75,76,77,78,95,102,],[-49,70,-41,-44,-49,-49,-49,-46,-42,-43,-45,-47,-48,-49,-40,]),'DIVIDE':([38,42,44,46,48,49,50,58,74,75,76,77,78,95,102,],[-49,71,-41,-44,-49,-49,-49,-46,-42,-43,-45,-47,-48,-49,-40,]),'LESS':([38,40,41,42,44,46,48,49,50,58,65,68,69,72,74,75,76,77,78,91,92,93,94,95,102,],[-49,61,-49,-49,-41,-44,-49,-49,-49,-46,-32,-35,-36,-39,-42,-43,-45,-47,-48,-33,-34,-37,-38,-49,-40,]),'GREATER':([38,40,41,42,44,46,48,49,50,58,65,68,69,72,74,75,76,77,78,91,92,93,94,95,102,],[-49,63,-49,-49,-41,-44,-49,-49,-49,-46,-32,-35,-36,-39,-42,-43,-45,-47,-48,-33,-34,-37,-38,-49,-40,]),'DIFFERENT':([38,40,41,42,44,46,48,49,50,58,65,68,69,72,74,75,76,77,78,91,92,93,94,95,102,],[-49,64,-49,-49,-41,-44,-49,-49,-49,-46,-32,-35,-36,-39,-42,-43,-45,-47,-48,-33,-34,-37,-38,-49,-40,]),'RIGHT_PAR':([38,40,41,42,44,46,48,49,50,51,53,54,58,60,62,65,68,69,72,73,74,75,76,77,78,88,89,90,91,92,93,94,95,99,100,101,102,],[-49,-49,-49,-49,-41,-44,-49,-49,-49,79,82,82,-46,-24,-28,-32,-35,-36,-39,95,-42,-43,-45,-47,-48,-49,-49,-49,-33,-34,-37,-38,-49,-25,-26,-27,-40,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'programA':([4,],[5,]),'vars':([4,],[6,]),'programB':([4,6,],[7,11,]),'bloque':([4,6,79,104,],[9,9,96,107,]),'varsA':([8,24,55,],[12,34,85,]),'empty':([9,17,18,19,20,36,37,38,40,41,42,48,49,50,55,59,88,89,90,95,96,98,107,],[14,27,28,29,30,56,57,58,62,68,72,76,77,78,86,87,99,100,101,102,105,106,108,]),'bloqueA':([10,16,],[15,26,]),'estatuto':([10,16,],[16,16,]),'asignacion':([10,16,],[18,18,]),'condicion':([10,16,],[19,19,]),'escritura':([10,16,],[20,20,]),'tipo':([25,],[35,]),'expresion':([31,32,33,43,81,],[39,51,53,73,53,]),'exp':([31,32,33,43,61,63,64,66,67,81,],[40,40,40,40,88,89,90,91,92,40,]),'termino':([31,32,33,43,61,63,64,66,67,70,71,81,],[41,41,41,41,41,41,41,41,41,93,94,41,]),'factor':([31,32,33,43,61,63,64,66,67,70,71,81,],[42,42,42,42,42,42,42,42,42,42,42,42,]),'factorA':([31,32,33,43,61,63,64,66,67,70,71,81,],[44,44,44,44,44,44,44,44,44,44,44,44,]),'factorB':([31,32,33,43,45,47,61,63,64,66,67,70,71,81,],[46,46,46,46,74,75,46,46,46,46,46,46,46,46,]),'varcte':([31,32,33,43,45,47,61,63,64,66,67,70,71,81,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'escrituraA':([33,81,],[52,97,]),'expresionA':([40,],[60,]),'expA':([41,],[65,]),'terminoA':([42,],[69,]),'escrituraB':([53,54,],[80,83,]),'varsB':([55,],[84,]),'condicionA':([96,],[103,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON programA','program',4,'p_program','littleducky.py',127),
  ('programA -> vars programB','programA',2,'p_program','littleducky.py',129),
  ('programA -> programB','programA',1,'p_program','littleducky.py',130),
  ('programB -> bloque empty','programB',2,'p_program','littleducky.py',132),
  ('vars -> VAR varsA','vars',2,'p_vars','littleducky.py',138),
  ('varsA -> ID COMMA varsA','varsA',3,'p_vars','littleducky.py',140),
  ('varsA -> ID COLON tipo SEMICOLON varsB','varsA',5,'p_vars','littleducky.py',141),
  ('varsB -> varsA','varsB',1,'p_vars','littleducky.py',143),
  ('varsB -> empty','varsB',1,'p_vars','littleducky.py',144),
  ('tipo -> INT empty','tipo',2,'p_tipo','littleducky.py',150),
  ('tipo -> FLOAT empty','tipo',2,'p_tipo','littleducky.py',151),
  ('bloque -> LEFT_CURVBR bloqueA','bloque',2,'p_bloque','littleducky.py',157),
  ('bloqueA -> estatuto bloqueA','bloqueA',2,'p_bloque','littleducky.py',158),
  ('bloqueA -> RIGHT_CURVBR empty','bloqueA',2,'p_bloque','littleducky.py',159),
  ('estatuto -> asignacion empty','estatuto',2,'p_estatuto','littleducky.py',165),
  ('estatuto -> condicion empty','estatuto',2,'p_estatuto','littleducky.py',166),
  ('estatuto -> escritura empty','estatuto',2,'p_estatuto','littleducky.py',167),
  ('asignacion -> ID EQUAL expresion SEMICOLON empty','asignacion',5,'p_asignacion','littleducky.py',173),
  ('escritura -> PRINT LEFT_PAR escrituraA','escritura',3,'p_escritura','littleducky.py',179),
  ('escrituraA -> expresion escrituraB','escrituraA',2,'p_escritura','littleducky.py',180),
  ('escrituraA -> STRING escrituraB','escrituraA',2,'p_escritura','littleducky.py',181),
  ('escrituraB -> COMMA escrituraA','escrituraB',2,'p_escritura','littleducky.py',182),
  ('escrituraB -> RIGHT_PAR SEMICOLON empty','escrituraB',3,'p_escritura','littleducky.py',183),
  ('expresion -> exp expresionA','expresion',2,'p_expresion','littleducky.py',189),
  ('expresionA -> LESS exp empty','expresionA',3,'p_expresion','littleducky.py',190),
  ('expresionA -> GREATER exp empty','expresionA',3,'p_expresion','littleducky.py',191),
  ('expresionA -> DIFFERENT exp empty','expresionA',3,'p_expresion','littleducky.py',192),
  ('expresionA -> empty','expresionA',1,'p_expresion','littleducky.py',193),
  ('condicion -> IF LEFT_PAR expresion RIGHT_PAR bloque condicionA','condicion',6,'p_condicion','littleducky.py',199),
  ('condicionA -> ELSE bloque empty','condicionA',3,'p_condicion','littleducky.py',200),
  ('condicionA -> empty','condicionA',1,'p_condicion','littleducky.py',201),
  ('exp -> termino expA','exp',2,'p_exp','littleducky.py',207),
  ('expA -> PLUS exp','expA',2,'p_exp','littleducky.py',208),
  ('expA -> MINUS exp','expA',2,'p_exp','littleducky.py',209),
  ('expA -> empty','expA',1,'p_exp','littleducky.py',210),
  ('termino -> factor terminoA','termino',2,'p_termino','littleducky.py',216),
  ('terminoA -> MULTIPLY termino','terminoA',2,'p_termino','littleducky.py',217),
  ('terminoA -> DIVIDE termino','terminoA',2,'p_termino','littleducky.py',218),
  ('terminoA -> empty','terminoA',1,'p_termino','littleducky.py',219),
  ('factor -> LEFT_PAR expresion RIGHT_PAR empty','factor',4,'p_factor','littleducky.py',225),
  ('factor -> factorA','factor',1,'p_factor','littleducky.py',226),
  ('factorA -> PLUS factorB','factorA',2,'p_factor','littleducky.py',227),
  ('factorA -> MINUS factorB','factorA',2,'p_factor','littleducky.py',228),
  ('factorA -> factorB','factorA',1,'p_factor','littleducky.py',229),
  ('factorB -> varcte empty','factorB',2,'p_factor','littleducky.py',230),
  ('varcte -> ID empty','varcte',2,'p_varcte','littleducky.py',236),
  ('varcte -> INT empty','varcte',2,'p_varcte','littleducky.py',237),
  ('varcte -> FLOAT empty','varcte',2,'p_varcte','littleducky.py',238),
  ('empty -> <empty>','empty',0,'p_empty','littleducky.py',247),
]
